{"title":"React小记【Redux】","uid":"60c5a95c0e5d17fc3703202ce808ceda","slug":"React学习总结( 三 ) 【 Redux 系列】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:48:55.107Z","comments":true,"path":"api/articles/React学习总结( 三 ) 【 Redux 系列】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq7.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"React-学习总结-三\"><a href=\"#React-学习总结-三\" class=\"headerlink\" title=\"React 学习总结( 三 )\"></a>React 学习总结( 三 )</h1><h1 id=\"1-什么是-redux\"><a href=\"#1-什么是-redux\" class=\"headerlink\" title=\"1.什么是 redux?\"></a>1.什么是 redux?</h1><hr>\n<p>Web 应用是一个状态机，视图与状态是一一对应的。</p>\n<p>所有的状态，保存在一个对象里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Redux是react中进行state状态管理的JS库（并不是react插件），一般是管理多个组件中共享数据状态。这个是和Vuex是一样的。</span>\n\n首先明确一点，Redux 是一个有用的架构，但不是非用不可。事实上，大多数情况，你可以不用它，只用 React 就够了。\n\n曾经有人说过这样一句话：\n\n<span class=\"token string\">\"如果你不知道是否需要 Redux，那就是不需要它。\"</span>\n\n<span class=\"token string\">\"只有遇到 React 实在解决不了的问题，你才需要 Redux 。\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"2-Redux-仓库结构【legacy-createStore】\"><a href=\"#2-Redux-仓库结构【legacy-createStore】\" class=\"headerlink\" title=\"2.Redux 仓库结构【legacy_createStore】\"></a>2.Redux 仓库结构【legacy_createStore】</h1><hr>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f26cfee8d5ec298034b914d2c343e73e.png\" alt=\"img\"></p>\n<h1 id=\"3-legacy-createStore（作用和-vue-的-createStore-完全一样，执行可以返回一个仓库实例）\"><a href=\"#3-legacy-createStore（作用和-vue-的-createStore-完全一样，执行可以返回一个仓库实例）\" class=\"headerlink\" title=\"3.legacy_createStore（作用和 vue 的 createStore 完全一样，执行可以返回一个仓库实例）\"></a>3.legacy_createStore（作用和 vue 的 createStore 完全一样，执行可以返回一个仓库实例）</h1><hr>\n<h4 id=\"使用流程：\"><a href=\"#使用流程：\" class=\"headerlink\" title=\"使用流程：\"></a>使用流程：</h4><ul>\n<li><h4 id=\"首先安装-redux-框架\"><a href=\"#首先安装-redux-框架\" class=\"headerlink\" title=\"首先安装 redux 框架\"></a>首先安装 redux 框架</h4><pre class=\"line-numbers language-node\" data-language=\"node\"><code class=\"language-node\">npm install redux --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><h4 id=\"创建-index-js-文件（需要用-node-js-启动该文件）\"><a href=\"#创建-index-js-文件（需要用-node-js-启动该文件）\" class=\"headerlink\" title=\"创建 index.js 文件（需要用 node.js 启动该文件）\"></a>创建 index.js 文件（需要用 node.js 启动该文件）</h4></li>\n<li><h4 id=\"结构出-legacy-createStore-【用-node-的-CommonJS-语法导入】\"><a href=\"#结构出-legacy-createStore-【用-node-的-CommonJS-语法导入】\" class=\"headerlink\" title=\"结构出 legacy_createStore 【用 node 的 CommonJS 语法导入】\"></a>结构出 legacy_createStore 【用 node 的 CommonJS 语法导入】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> legacy_createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><h4 id=\"创建仓库原始数据\"><a href=\"#创建仓库原始数据\" class=\"headerlink\" title=\"创建仓库原始数据\"></a>创建仓库原始数据</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"zhangmou\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h4 id=\"创建-reducer-函数-用于改变-state\"><a href=\"#创建-reducer-函数-用于改变-state\" class=\"headerlink\" title=\"创建 reducer 函数, 用于改变 state\"></a>创建 reducer 函数, 用于改变 state</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//todo reducer需要传入两个参数, state,action</span>\n<span class=\"token comment\">//todo action是一个带有type属性的对象</span>\n<span class=\"token comment\">//todo reducer要满足纯函数的条件</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"add\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token comment\">// state原始数据始终没有被改变，返回一个新的对象覆盖原对象</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"minus\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n'纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用，非异步，入参相同，出场必定相同\n\n<span class=\"token comment\">//  非纯函数 返回值与a相关，无法预料</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 3</span>\n\n<span class=\"token comment\">// 纯函数 返回结果只依赖于它的参数 x 和 b，foo(1, 2) 只要 foo 代码不改变，你传入的参数是确定的，那么 foo(1, 2) 的值永远是可预料的。</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> b\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h4 id=\"创建-store-仓库实例\"><a href=\"#创建-store-仓库实例\" class=\"headerlink\" title=\"创建 store 仓库实例\"></a>创建 store 仓库实例</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//todo legacy_createStore执行可以返回一个仓库实例</span>\n<span class=\"token comment\">//todo 第一个参数是reducer的函数</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">legacy_createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//生成了含有方法的对象 [dispath、subscribe、getState]</span>\n <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// dispatch用来调用reducer函数</span>\n     dispatch<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Function</span><span class=\"token operator\">:</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// subscribe用来监听仓库数据的改变</span>\n    subscribe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Function</span><span class=\"token operator\">:</span> subscribe<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// getState用于获取仓库数据</span>\n    getState<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Function</span><span class=\"token operator\">:</span> getState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    replaceReducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Function</span><span class=\"token operator\">:</span> replaceReducer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    '@<span class=\"token annotation punctuation\">@observable</span>'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Function</span><span class=\"token operator\">:</span> observable<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>store.dispatch（{type:xxxx}）<font color='each'>调用 action，里面传入的对象就是 action</font></strong></p>\n</li>\n<li><p><strong>store.subscribe(callback 回调函数) <font color='each'>传入回调函数，用来监听仓库数据的改变</font></strong></p>\n</li>\n<li><p><strong>store.getState( ) <font color='each'>用于获取仓库数据</font></strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//todo 表示仓库的原始数据</span>\n<span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangmou\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//dispatch用来调用reducer函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// switch (action.type) &#123;</span>\n  <span class=\"token comment\">//   case \"add\":</span>\n  <span class=\"token comment\">//     return &#123;</span>\n  <span class=\"token comment\">//       ...state,</span>\n  <span class=\"token comment\">//       count: state.count + 1,</span>\n  <span class=\"token comment\">//     &#125;;</span>\n  <span class=\"token comment\">//   case \"minus\":</span>\n  <span class=\"token comment\">//     return &#123;</span>\n  <span class=\"token comment\">//       ...state,</span>\n  <span class=\"token comment\">//       count: state.count - action.num,</span>\n  <span class=\"token comment\">//     &#125;;</span>\n  <span class=\"token comment\">//   default:</span>\n  <span class=\"token comment\">//     return state;</span>\n  <span class=\"token comment\">// &#125;</span>\n  <span class=\"token comment\">//用对象字面量代替switch冗杂的语句</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">minus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>num <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; count: 4, name: 'zhangmou' &#125;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; count: 5, name: 'zhangmou' &#125;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; count: 2, name: 'zhangmou' &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-redux-与-react-结合实战\"><a href=\"#4-redux-与-react-结合实战\" class=\"headerlink\" title=\"4.redux 与 react 结合实战\"></a>4.redux 与 react 结合实战</h1><hr>\n<h4 id=\"一、同步方法\"><a href=\"#一、同步方法\" class=\"headerlink\" title=\"一、同步方法\"></a>一、同步方法</h4><ol>\n<li><p><strong>单独创建 store 文件夹【index.js 创建仓库实例，reducer.js 写方法】</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> legacy_createStore <span class=\"token keyword\">as</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// as重命名</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducer.js\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引入reducer函数</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>'创建reducer函数<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n <span class=\"token comment\">//todo 表示仓库的原始数据</span>\n<span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangmou\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'add'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'minus'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>num <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'default'</span><span class=\"token operator\">:</span> state\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>​ <strong>2.组件的 index.js 部分配置</strong> 【<font color='orage'>解构出 provider 提供者，引入 store 仓库实例，挂载到组件上，类似跨组件通信</font>】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//解构出Provider,提供仓库数据</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./redux-todolist-async/redux\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将创建好的仓库实例引入</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./redux-todolist-async/App\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// App组件</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 包裹总组件，可以为所有组件提供服务，传入store数据</span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​ <strong>3.组件如何使用？</strong>【<font color='orage'>哪个组件需要，就在哪个组件解构出 <strong>connect</strong> 函数连通仓库，mapStateToProps 数据，mapDispatchToProps 方法</font>】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo connect需要接收两个参数，这两个参数都是函数, mapStateToProps[state数据],mapDispatchToProps[dispatch调用]</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> connect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> num <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以写方法，dispatch调用仓库的reducer函数进行交互，可以从组件接受参数</span>\n    <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minus\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将仓库的改变数据的方法映射到组件的props里面</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xxx调用方法\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"connect(mapStateToProps,mapDispatchToProps)(App)\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//connect是函数，返回函数，调用后将App当参数传递</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"二、异步方法\"><a href=\"#二、异步方法\" class=\"headerlink\" title=\"二、异步方法\"></a>二、异步方法</h4><h5 id=\"与同步的不同点-使用-applyMiddleware-中间件接收一个异步库-thunk-异步库需安装\"><a href=\"#与同步的不同点-使用-applyMiddleware-中间件接收一个异步库-thunk-异步库需安装\" class=\"headerlink\" title=\"与同步的不同点: 使用 applyMiddleware 中间件接收一个异步库 thunk,异步库需安装\"></a>与同步的不同点: <strong><font color='Salmon '>使用 applyMiddleware 中间件接收一个异步库 thunk,异步库需安装</font></strong></h5><ul>\n<li><p><strong>仓库实例部分</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 创建仓库实例</span>\n<span class=\"token comment\">// todo applyMiddleware中间件用于处理异步</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> legacy_createStore <span class=\"token keyword\">as</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./reducer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo 异步库</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-thunk\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// todo createStore还可以接收第二个参数, 就是中间件的返回值</span>\n<span class=\"token comment\">// todo applyMiddleware可以接收一个参数是异步库</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>额外创建 actionCreator.js 文件,【动作创建者】</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">minusAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 需要暴露一下，需要的地方引入，还可以接收参数</span>\n  <span class=\"token comment\">// todo 使用了中间件以后，action里面就可以返回函数了，由中间件来帮助执行这个函数</span>\n  <span class=\"token comment\">// todo 这个函数可以使用dispatch参数</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addlist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.pudge.wang:3080/api/rated/list\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//进行数据请求</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>result <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//真正的dispatch调用action</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>组件如何使用？</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 哪个组件需要直接引入动作创建者文件</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>addlist<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./redux/actionCreator'</span>；\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> connect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">addlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// dispatch调用的是异步函数的方法，不是直接调用action了，需要中转一下</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>总结:</strong></p>\n<p><strong><font color='Salmon '>总的与同步一样，多了中间件引用异步库，第一次 dispatch 调用的是异步库的函数进行中转<br>第二次 dispatch 调用才是真正的 action,用法与同步相同</font></strong></p>\n<hr>\n</li>\n</ul>\n","text":"React 学习总结( 三 )1.什么是 redux? Web 应用是一个状态机，视图与状态是一一对应的。 所有的状态，保存在一个对象里面。 // Redux是react中进行state状态管理的JS库（并不是react插件），一般是管理多个组件中共享数据状态。这个是和Vuex是...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%E4%B8%89\"><span class=\"toc-text\">React 学习总结( 三 )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF-redux\"><span class=\"toc-text\">1.什么是 redux?</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Redux-%E4%BB%93%E5%BA%93%E7%BB%93%E6%9E%84%E3%80%90legacy-createStore%E3%80%91\"><span class=\"toc-text\">2.Redux 仓库结构【legacy_createStore】</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-legacy-createStore%EF%BC%88%E4%BD%9C%E7%94%A8%E5%92%8C-vue-%E7%9A%84-createStore-%E5%AE%8C%E5%85%A8%E4%B8%80%E6%A0%B7%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%8F%AF%E4%BB%A5%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%AE%9E%E4%BE%8B%EF%BC%89\"><span class=\"toc-text\">3.legacy_createStore（作用和 vue 的 createStore 完全一样，执行可以返回一个仓库实例）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">使用流程：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E5%AE%89%E8%A3%85-redux-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">首先安装 redux 框架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-index-js-%E6%96%87%E4%BB%B6%EF%BC%88%E9%9C%80%E8%A6%81%E7%94%A8-node-js-%E5%90%AF%E5%8A%A8%E8%AF%A5%E6%96%87%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">创建 index.js 文件（需要用 node.js 启动该文件）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E5%87%BA-legacy-createStore-%E3%80%90%E7%94%A8-node-%E7%9A%84-CommonJS-%E8%AF%AD%E6%B3%95%E5%AF%BC%E5%85%A5%E3%80%91\"><span class=\"toc-text\">结构出 legacy_createStore 【用 node 的 CommonJS 语法导入】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">创建仓库原始数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-reducer-%E5%87%BD%E6%95%B0-%E7%94%A8%E4%BA%8E%E6%94%B9%E5%8F%98-state\"><span class=\"toc-text\">创建 reducer 函数, 用于改变 state</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-store-%E4%BB%93%E5%BA%93%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">创建 store 仓库实例</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-redux-%E4%B8%8E-react-%E7%BB%93%E5%90%88%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">4.redux 与 react 结合实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">一、同步方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">二、异步方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%90%8C%E6%AD%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E7%82%B9-%E4%BD%BF%E7%94%A8-applyMiddleware-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8E%A5%E6%94%B6%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%BA%93-thunk-%E5%BC%82%E6%AD%A5%E5%BA%93%E9%9C%80%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">与同步的不同点: 使用 applyMiddleware 中间件接收一个异步库 thunk,异步库需安装</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React小记【Router 4.5】","uid":"37bd36721f8bec015e9d4d3d62e233ff","slug":"React学习总结( 四 ) 【 路由4.5系列】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:17.341Z","comments":true,"path":"api/articles/React学习总结( 四 ) 【 路由4.5系列】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq6.jpg","text":"React 学习总结( 四 ) 【 路由系列】 react-router-dom(路由 4.5 版本) 一、基础路由搭建 相关技术点： 安装路由，解构出 BrowserRouter 套住需要路由的根组件 import &#123; BrowserRouter as Router ...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"gitlab 配置 ssh key","uid":"8af137cd21190334ea8f2f15702e9068","slug":"gitlab配置ssh key","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:47:56.885Z","comments":true,"path":"api/articles/gitlab配置ssh key.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq1.jpeg","text":"gitlab 配置 ssh key打开本地 git bash 或者 cmd,使用如下命令生成ssh公钥和私钥对 ssh-keygen -t rsa -C &#39;xxx@xxx.com&#39; 然后一路回车(-C 参数是你的邮箱地址) ssh-keygen Enter 一路回...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"gitlab","slug":"gitlab","count":1,"path":"api/categories/gitlab.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}