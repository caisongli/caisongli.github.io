{"title":"前端学习笔记","uid":"adae1d78a6d22cbcc84e90a45ad047a3","slug":"面试题总结","date":"2022-12-26T13:14:11.606Z","updated":"2023-01-30T08:20:17.210Z","comments":true,"path":"api/articles/面试题总结.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-NzmzMixx\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"3535982902\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#3F51B5\"\n    ></div>\n\n<h2 id=\"html-部分\"><a href=\"#html-部分\" class=\"headerlink\" title=\"html 部分\"></a>html 部分</h2><h3 id=\"1-DOCTYPE-有什么作用？\"><a href=\"#1-DOCTYPE-有什么作用？\" class=\"headerlink\" title=\"1. 　 DOCTYPE 　有什么作用？\"></a>1. 　 DOCTYPE 　有什么作用？</h3><p><font color='orange'>告诉浏览器使用哪个版本的 <code>HTML</code> 规范来渲染文档。<code>DOCTYPE</code> 不存在或形式不正确会导致 HTML 文档以混杂模式呈现。</font></p>\n<h3 id=\"2-页面导入样式时，使用-link-和-import-有什么区别？\"><a href=\"#2-页面导入样式时，使用-link-和-import-有什么区别？\" class=\"headerlink\" title=\"2.页面导入样式时，使用 link 和 @import 有什么区别？\"></a>2.页面导入样式时，使用 <code>link</code> 和 <code>@import</code> 有什么区别？</h3><p><font color='orange'><code>link</code> 引用 <code>CSS</code> 时候，页面载入时同时加载；</font></p>\n<p><font color='orange'><code>@import</code> 需要在页面完全加载以后加载，而且<code>@import</code> 被引用的 <code>CSS</code> 会等到引用它的<code>CSS</code> 文件被加载完才加载</font></p>\n<h3 id=\"3-请写出-HTML-块元素标签、行内元素标签、空-void-元素有那些？\"><a href=\"#3-请写出-HTML-块元素标签、行内元素标签、空-void-元素有那些？\" class=\"headerlink\" title=\"3.请写出 HTML 块元素标签、行内元素标签、空(void)元素有那些？\"></a>3.请写出 HTML 块元素标签、行内元素标签、空(void)元素有那些？</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 块级元素标签： 　<font color='orange'> <code>div</code> <code>p</code> <code>ul</code> <code>li</code> <code>table</code> <code>h1</code> … <code>h6</code> <code>form</code></font> 等</li>\n<li><input disabled=\"\" type=\"checkbox\"> 行内元素标签： 　<font color='orange'>span<code> </code>a<code> </code>i<code> </code>label<code> </code>img<code> </code>input<code> </code>button<code> </code>textarea<code> </code>select</font> 等</li>\n<li><input disabled=\"\" type=\"checkbox\"> 空(<code>void</code>)元素： 　<font color='orange'>br<code> </code><hr><code> </code><link><code> </code><meta></font> 等</li>\n</ul>\n<h3 id=\"4-HTML5-的文件离线储存怎么使用？\"><a href=\"#4-HTML5-的文件离线储存怎么使用？\" class=\"headerlink\" title=\"4.HTML5 的文件离线储存怎么使用？\"></a>4.HTML5 的文件离线储存怎么使用？</h3><p>在页面头部加入 <code>manifest</code> 属性</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">manifest</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cache.manifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-SVG-与-Canvas\"><a href=\"#5-SVG-与-Canvas\" class=\"headerlink\" title=\"5. SVG 与 Canvas\"></a>5. SVG 与 Canvas</h3><p><strong>SVG 表示（scalable vector graphics）可缩放矢量图形。Canvas 画布</strong></p>\n<p><font color='orange'><strong>SVG</strong>：通过使用 SVG 绘制的任意形状都可以被记住和操作，并且浏览器可以再次渲染它<br><strong>Canvas</strong>:画布则是绘制然后遗忘。一旦绘制完成，你就不能访问和处理像素。</font></p>\n<h3 id=\"6-请用-html-知识解决-seo-优化问题？\"><a href=\"#6-请用-html-知识解决-seo-优化问题？\" class=\"headerlink\" title=\"6.请用 html 知识解决 seo 优化问题？\"></a>6.请用 html 知识解决 seo 优化问题？</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>html对SEO的优化<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>/*不推荐用这个*/\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SEO,爬虫，搜索引擎、百度、html优化<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n增加关键词搜索\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>通过html标签及属性的使用提高网站被爬虫爬取的几率，使用户百度时网站尽量排在前面，提高用户的点击率<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span>\n添加描述<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-常用浏览器有哪些，内核都是什么，内核的理解？\"><a href=\"#7-常用浏览器有哪些，内核都是什么，内核的理解？\" class=\"headerlink\" title=\"7.常用浏览器有哪些，内核都是什么，内核的理解？\"></a>7.常用浏览器有哪些，内核都是什么，内核的理解？</h3><p>常用浏览器有 IE 火狐(firefox) chrome safari 360 搜狗 等</p>\n<ul>\n<li>IE 的是 Trident</li>\n<li>火狐的是 Gecko</li>\n<li><font color='orange'>chrome 和 safari 用的是 Webkit</font></li>\n<li>360 和搜狗这些分极速模式和兼容模式，极速模式用的 Webkit 的内核，兼容模式用的 Trident 内核</li>\n</ul>\n<p><strong><font color='orange'>浏览器内核主要分成两部分：渲染引擎(<code>Layout Engine</code>或<code>Rendering Engine</code>) 和 JS 引擎。</font></strong></p>\n<h3 id=\"8-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation-的区别\"><a href=\"#8-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation-的区别\" class=\"headerlink\" title=\"8.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 的区别?\"></a>8.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 的区别?</h3><ul>\n<li>渐进增强: 先保证低版本浏览器的基本功能，再去兼容高版本浏览器效果和交互。</li>\n<li>优雅降级: 先保证高版本浏览器的效果和交互等，再去兼容低版本的浏览器。</li>\n</ul>\n<h3 id=\"9-什么是-FOUC（文档样式短暂失效）\"><a href=\"#9-什么是-FOUC（文档样式短暂失效）\" class=\"headerlink\" title=\"9.什么是 FOUC（文档样式短暂失效）?\"></a>9.什么是 FOUC（文档样式短暂失效）?</h3><ul>\n<li>原理：当样式表晚于结构性 html 加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。( <font color='orange'>使用<code>@import</code> 方法导入样式表</font>)</li>\n<li>解决方法：使用 <code>link</code> 标签加载 CSS 样式文件。因为 <code>link</code> 是顺序加载的，这样页面会等到 CSS 下载完之后再下载 HTML 文件，这样先布局好，就不会出现 <code>FOUC</code> 问题。</li>\n</ul>\n<h3 id=\"10-Cookie，sessionStorage-和-localStorage-的区别？\"><a href=\"#10-Cookie，sessionStorage-和-localStorage-的区别？\" class=\"headerlink\" title=\"10.Cookie，sessionStorage 和 localStorage 的区别？\"></a>10.<code>Cookie</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3><p><font color='orange'>共同点：都是保存在浏览器端，且是同源的。</font></p>\n<p><font color='orange'>存储位置不同：cookie 在浏览器和服务器间来回传递，而 <code>sessionStorage</code> 和 <code>localStorage</code> 不会自动把数据发给服务器，仅在本地保存。</font></p>\n<p><font color='orange'>存储大小的限制不同：<code>cookie</code> 保存的数据很小，不能超过 4k，而 <code>sessionStorage</code> 和<code>localStorage</code> 保存的数据大，可达到 5M。</font></p>\n<p><font color='orange'>数据的有效期不同：<code>cookie</code> 在设置的 <code>cookie</code> 过期时间之前一直有效，即使窗口或者浏览器关闭。<code>sessionStorage</code> 仅在浏览器窗口关闭之前有效。<code>localStorage</code> 始终有效，窗口和浏览器关闭也一直保存，用作长久数据保存。</font></p>\n<p><font color='orange'>作用域不同：<code>cookie</code> 在所有的同源窗口都是共享；<code>sessionStorage</code> 不在不同的浏览器共享，即使同一页面；<code>localStorage</code> 在所有同源窗口都是共享。</font></p>\n<h2 id=\"indexedDB-介绍\"><a href=\"#indexedDB-介绍\" class=\"headerlink\" title=\"indexedDB 介绍\"></a>indexedDB 介绍</h2><p><code>indexedDB</code> 是一个前端数据持久化解决方案（即前端缓存），由浏览器实现。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.存储量大，理论上不封顶\n2.同源策略是一样的\n3.多数api采用的都是异步的方式，防止数据量大的时候阻塞其他的一些操作\n4.通过对象仓库存储的方式\n5.存储的类型比较丰富\n6.能够为数据建立索引，提供查找性能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1.</span>对象仓库，在indexedDB中是没有表的概念的，而是objectStore，一个数据库中可以包含多个objectStore，它是一个灵活的数据结构可以存放多种类型数据，里面储存的每条数据都和一个键相关联。键值可以指定也可以用数字递增也可以不指定但存储的类型会有差异。\n\n<span class=\"token number\">2.</span>事务性， 每次操作数据库都必须创建一个事务，<span class=\"token number\">2</span>个参数（表名，是否可读写） db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">,</span> ‘readwrite’<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">3.</span>基于请求，异步，indexedDB打开数据库，新建表等都是基于请求的，是一种异步的处理方式，必须在他回调函数中处理<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"11-如何实现浏览器内多个标签页之间的通信\"><a href=\"#11-如何实现浏览器内多个标签页之间的通信\" class=\"headerlink\" title=\"11.如何实现浏览器内多个标签页之间的通信?\"></a>11.如何实现浏览器内多个标签页之间的通信?</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token operator\">/</span> WebSocket、SharedWorker\n\n<span class=\"token comment\">//可以调用 localstorge、cookie 等本地存储方式。localstorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"12-什么是渐进式渲染？\"><a href=\"#12-什么是渐进式渲染？\" class=\"headerlink\" title=\"12.什么是渐进式渲染？\"></a>12.什么是渐进式渲染？</h3><ul>\n<li><p><font color='orange'>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</font></p>\n</li>\n<li><p><font color='orange'>在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。</font></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">比如：\n<span class=\"token comment\">//（1）图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript将加载并显示图像。</span>\n<span class=\"token comment\">//（2）确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的CSS、脚本和内容，然后可以使用延迟加载脚本或监听DOMContentLoaded/load事件加载其他资源和内容。</span>\n'（<span class=\"token number\">3</span>）异步加载<span class=\"token constant\">HTML</span>片段——当页面通过后台渲染时，把<span class=\"token constant\">HTML</span>拆分，通过异步请求，分块发送给浏览器。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"css3-部分\"><a href=\"#css3-部分\" class=\"headerlink\" title=\"css3 部分\"></a>css3 部分</h2><h3 id=\"1-CSS3-有哪些新特性？\"><a href=\"#1-CSS3-有哪些新特性？\" class=\"headerlink\" title=\"1. CSS3 有哪些新特性？\"></a>1. CSS3 有哪些新特性？</h3><pre class=\"line-numbers language-jade\" data-language=\"jade\"><code class=\"language-jade\">RGBA 和 透明度\nbackground-image background-origin(content-box&#x2F;padding-box&#x2F;border-box) background-size background-repeat\nword-wrap（对长的不可分割单词换行）word-wrap：break-word\n文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）\nfont-face 属性：定义自己的字体\n圆角（边框半径）：border-radius 属性用于创建圆角\n边框图片：border-image: url(border.png) 30 30 round\n盒阴影：box-shadow: 10px 10px 5px #888888\n媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-解释一下-Flexbox-弹性盒布局模型-？及适用场景？\"><a href=\"#2-解释一下-Flexbox-弹性盒布局模型-？及适用场景？\" class=\"headerlink\" title=\"2.解释一下 Flexbox (弹性盒布局模型)？及适用场景？\"></a>2.解释一下 <code>Flexbox</code> (弹性盒布局模型)？及适用场景？</h3><ul>\n<li><font color='orange'>一个容器默认有两条轴，一个是水平的主轴，一个是与主轴垂直的交叉轴。</font></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">属性：\nflex-direction 定义主轴的方向；\nflex-wrap 定义是否换行；\nflex-flow 上述2个属性的简写；\njustify-content 定义项目在主轴上的对齐方式；\nalign-items 定义项目在交叉轴上如何对齐；\nalign-content 定义多根轴线的对齐方式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/caisong-li/img/raw/master/hz5.jpg\" alt=\"image-20220806111527552\"></p>\n<h3 id=\"3-CSS3-新增伪类有那些\"><a href=\"#3-CSS3-新增伪类有那些\" class=\"headerlink\" title=\"3.CSS3 新增伪类有那些?\"></a>3.CSS3 新增伪类有那些?</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">'p<span class=\"token operator\">:</span>first<span class=\"token operator\">-</span><span class=\"token keyword\">of</span><span class=\"token operator\">-</span>type 选择属于其父元素的首个元素\n'p<span class=\"token operator\">:</span>last<span class=\"token operator\">-</span><span class=\"token keyword\">of</span><span class=\"token operator\">-</span>type 选择属于其父元素的最后元素\n'p<span class=\"token operator\">:</span>only<span class=\"token operator\">-</span><span class=\"token keyword\">of</span><span class=\"token operator\">-</span>type 选择属于其父元素唯一的元素\n<span class=\"token comment\">//p:only-child 选择属于其父元素的唯一子元素</span>\n<span class=\"token comment\">//p:nth-child(2) 选择属于其父元素的第二个子元素</span>\n<span class=\"token operator\">:</span>enabled <span class=\"token operator\">:</span>disabled 表单控件的禁用状态。\n<span class=\"token operator\">:</span>checked 单选框或复选框被选中。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-为什么要清除浮动？清除浮动的方式\"><a href=\"#4-为什么要清除浮动？清除浮动的方式\" class=\"headerlink\" title=\"4.为什么要清除浮动？清除浮动的方式\"></a>4.为什么要清除浮动？清除浮动的方式</h3><ul>\n<li><font color='orange'>清除浮动是为了清除使用浮动元素产生的影响：浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</font></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span><span class=\"token comment\">/* 万能清除浮动代码*/</span>  <span class=\"token number\">2</span> <span class=\"token comment\">/*在结尾处添加空div标签 clear:both*/</span>  <span class=\"token number\">3</span><span class=\"token comment\">/*父级div定义height*/</span> <span class=\"token number\">4</span> <span class=\"token comment\">/*父级div定义 overflow:hidden 或 overflow:auto*/</span>\n<span class=\"token comment\">//.clearfloat:after&#123;</span>\n\t<span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span>block<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">clear</span><span class=\"token operator\">:</span>both<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span>hidden<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//.clearfloat&#123;</span>\n\t<span class=\"token literal-property property\">zoom</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用\"><a href=\"#5-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用\" class=\"headerlink\" title=\"5.::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用\"></a>5.<code>::before</code> 和 <code>:after</code> 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</h3><ul>\n<li><p>单冒号( <code>:</code> )用于 CSS3 伪类，双冒号( <code>::</code> )用于 CSS3 伪元素。</p>\n</li>\n<li><p><code>::before</code> 就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在于页面之中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//:before 和 :after 这两个伪元素，是在 CSS2.1 里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为 ::before ::after。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"6-让页面里的字体变清晰，变细用-CSS-怎么做？\"><a href=\"#6-让页面里的字体变清晰，变细用-CSS-怎么做？\" class=\"headerlink\" title=\"6.让页面里的字体变清晰，变细用 CSS 怎么做？\"></a>6.让页面里的字体变清晰，变细用 CSS 怎么做？</h3><ol>\n<li><strong><code>-webkit-font-smoothing</code> 在 window 系统下没有起作用，但是在 IOS 设备上起作用</strong></li>\n<li><strong><code>-webkit-font-smoothing：antialiased</code> 是最佳的，灰度平滑。</strong></li>\n</ol>\n<h3 id=\"7-如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"><a href=\"#7-如果需要手动写动画，你认为最小时间间隔是多久，为什么？\" class=\"headerlink\" title=\"7.如果需要手动写动画，你认为最小时间间隔是多久，为什么？\"></a>7.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//多数显示器默认频率是 60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"8-什么是响应式设计？响应式设计的基本原理是什么？\"><a href=\"#8-什么是响应式设计？响应式设计的基本原理是什么？\" class=\"headerlink\" title=\"8.什么是响应式设计？响应式设计的基本原理是什么？\"></a>8.什么是响应式设计？响应式设计的基本原理是什么？</h3><p><font color='orange'>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</font></p>\n<p><font color='orange'>基本原理是通过<strong>媒体查询 <code>@media</code> 检测不同的设备屏幕尺寸做处理</strong>。</font></p>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220806111425650.png\" alt=\"image-20220806111425650\"></p>\n<h3 id=\"9-Sass、Less-是什么？大家为什么要使用他们？\"><a href=\"#9-Sass、Less-是什么？大家为什么要使用他们？\" class=\"headerlink\" title=\"9.Sass、Less 是什么？大家为什么要使用他们？\"></a><code>9.Sass</code>、<code>Less</code> 是什么？大家为什么要使用他们？</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>他们是<span class=\"token constant\">CSS</span>预处理器。是<span class=\"token constant\">CSS</span>上的一种抽象层。它们是一种特殊的语法、语言编译成<span class=\"token constant\">CSS</span>。\n\n' Less 是一种动态样式语言。将<span class=\"token constant\">CSS</span>赋予了动态语言的特性，如变量，继承，运算，函数。Less即可以在客户端上运行（支持<span class=\"token constant\">IE6</span><span class=\"token operator\">+</span><span class=\"token punctuation\">,</span>Webkit<span class=\"token punctuation\">,</span>Firefox），也可以在服务端运行（借助Node<span class=\"token punctuation\">.</span>js）。\n<span class=\"token comment\">//Sass 变量必须是 $ 开始，而 Less 变量必须使用 @ 符号开始。</span>\n为什么要使用它们？\n\n<span class=\"token comment\">//结构清晰，便于扩展。</span>\n<span class=\"token comment\">//可以方便地屏蔽浏览器私有语法差异。（这个不用多说，封装对浏览器语法差异的重复处理，减少无异议的机械劳动。）</span>\n<span class=\"token comment\">//可以轻松实现多重继承。</span>\n<span class=\"token comment\">//完全兼容CSS代码，可以方便地应用到老项目中。Less 只是在CSS语法上做了扩展，所以老的CSS代码也可以与 Less 代码一同编译。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-display-inline-block-什么时候会显示间隙？\"><a href=\"#10-display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"10.display:inline-block 什么时候会显示间隙？\"></a>10.<code>display:inline-block</code> 什么时候会显示间隙？</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//有空格时候会有间隙——解决：移除空格</span>\n<span class=\"token comment\">//margin 正值的时候——解决：margin使用负值</span>\n<span class=\"token comment\">//使用 font-size 时候——解决：font-size:0、letter-spacing、word-spacing</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"11-浏览器是怎样解析-CSS-选择器的？\"><a href=\"#11-浏览器是怎样解析-CSS-选择器的？\" class=\"headerlink\" title=\"11.浏览器是怎样解析 CSS 选择器的？\"></a>11.浏览器是怎样解析 CSS 选择器的？</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span><span class=\"token constant\">CSS</span>选择器的解析是从右向左解析的。\n\n'若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。\n<span class=\"token comment\">//若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。</span>\n'两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。\n<span class=\"token comment\">//而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的Attachment过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"12-CSS-优化、提高性能的方法有哪些？\"><a href=\"#12-CSS-优化、提高性能的方法有哪些？\" class=\"headerlink\" title=\"12. CSS 优化、提高性能的方法有哪些？\"></a>12. CSS 优化、提高性能的方法有哪些？</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">'避免过度约束\n'避免后代选择符\n'避免链式选择符\n'使用紧凑的语法\n'避免不必要的命名空间\n'避免不必要的重复\n'最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么\n'避免 <span class=\"token operator\">!</span>important，可以选择其他选择器\n'尽可能的精简规则，你可以合并不同类里的重复规则<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"13-阐述一下-CSS-Sprites（雪碧图）\"><a href=\"#13-阐述一下-CSS-Sprites（雪碧图）\" class=\"headerlink\" title=\"13.阐述一下 CSS Sprites（雪碧图）\"></a>13.阐述一下 CSS Sprites（雪碧图）</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background- repeat，background-position 的组合进行背景定位。</span>\n<span class=\"token comment\">//利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能；CSS Sprites能减少图片的字节。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"14-移动端的布局用过媒体查询吗？\"><a href=\"#14-移动端的布局用过媒体查询吗？\" class=\"headerlink\" title=\"14.移动端的布局用过媒体查询吗？\"></a>14.移动端的布局用过媒体查询吗？</h3><p><strong>通过媒体查询可以为不同大小和尺寸的媒体定义不同的 css，适应相应的设备的显示</strong>。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  里边引入： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”stylesheet”</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”text/css”</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”xxx.css”</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”only</span>\n  <span class=\"token attr-name\">screen</span> <span class=\"token attr-name\">and</span> <span class=\"token attr-name\"><span class=\"token namespace\">(max-device-width:</span>480px)”</span><span class=\"token punctuation\">></span></span> 1 CSS中定义： @media only screen and\n  (max-device-width:480px) &#123; /* css样式 */ &#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"15-上下-margin-重合的问题\"><a href=\"#15-上下-margin-重合的问题\" class=\"headerlink\" title=\"15.上下 margin 重合的问题?\"></a>15.上下 <code>margin</code> 重合的问题?</h3><p><font color='orange'><strong>在重合元素外包裹一层容器，通过改变此<code>div</code>的属性使两个盒子分属于两个不同的<code>BFC</code>，以此来阻止<code>margin</code>重叠。</strong></font></p>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220806113745742.png\" alt=\"image-20220806113745742\"></p>\n<h2 id=\"js-部分\"><a href=\"#js-部分\" class=\"headerlink\" title=\"js 部分\"></a>js 部分</h2><h3 id=\"1、0-1-0-2-0-3-？为什么？false\"><a href=\"#1、0-1-0-2-0-3-？为什么？false\" class=\"headerlink\" title=\"1、0.1 + 0.2 === 0.3 ？为什么？false\"></a>1、0.1 + 0.2 === 0.3 ？为什么？false</h3><p><font color='orae'><strong>精度丢失可能出现在进制转换和对阶运算中</strong></font></p>\n<p><font color='orange'>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。</font></p>\n<h3 id=\"2、JS-数据类型\"><a href=\"#2、JS-数据类型\" class=\"headerlink\" title=\"2、JS 数据类型\"></a>2、JS 数据类型</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//基本类型：Number、Boolean、String、null、undefined、symbol（ES6 新增的），BigInt（ES2020）</span>\n\n<span class=\"token comment\">//引用类型：Object，对象子类型（Array，Function）</span>\n\n'扩展：symbol 有什么用处？\n\n<span class=\"token comment\">//可以用来表示一个独一无二的变量防止命名冲突。</span>\n还可以利用 symbol 不会被常规的方法（除了 <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>getOwnPropertySymbols 外）遍历到，所以可以用来模拟私有变量。\n<span class=\"token comment\">//主要用来提供遍历接口，布置了 symbol.iterator 的对象才可以使用 for···of 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。</span>\n<span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 可以在全局访问 symbol\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、如何判断-JS-数据类型\"><a href=\"#3、如何判断-JS-数据类型\" class=\"headerlink\" title=\"3、如何判断 JS 数据类型\"></a>3、如何判断 JS 数据类型</h3><p>一、<strong>typeof</strong> 【检测除 null 外的基本类型 返回字符串 】</p>\n<p><font color='orange'> <strong>typeof  返回一个表示数据类型的字符串，返回结果包括：number、string、boolean、object、undefined、function。typeof 可以对基本类型 number、string、boolean、undefined 做出准确的判断（null 除外，typeof null === “object”）；而对于引用类型，除了 function 之外返回的都是 object。但当我们需要知道某个对象的具体类型时，typeof 就显得有些力不从心了。</strong></font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// number 有效</span>\n<span class=\"token keyword\">typeof</span> ‘ ’<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// string 有效</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean 有效</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 有效</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> object 无效\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function 有效</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> object 无效\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> object 无效\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span> object 无效\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number Not a Number，表示非数字</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>二、<strong>instanceof</strong> 【检测是否是某个构造函数的实例】</p>\n<p><font color='orang'> 当我们需要知道某个对象的具体类型时，可以用运算符 <code>instanceof</code>，<code>instanceof</code> 操作符判断左操作数对象的原型链上是否有右边这个构造函数的 <code>prototype</code> 属性，也就是说指定对象是否是某个构造函数的实例，最后返回布尔值。</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//当 A 的 __proto__ 指向 B 的 prototype 时，就认为A就是B的实例</span>\n<span class=\"token keyword\">instanceof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// L是A的原型对象</span>\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// R是B的原型对象</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">===</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// A的内部属性__proto__指向B的原型对象</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//创建 Person 构造函数</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>三、constructor</strong> 【得知某个实例对象，到底是哪一个构造函数产生的】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//constructor 属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span>\n\n<span class=\"token operator\">/</span>但是 constructor 属性易变，不可信赖，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 会丢失。\n<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">_name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Eric'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">//因此，为了规范，在重写对象原型时一般都需要重新给 constructor 赋值，以保证实例对象的类型不被改写。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>四、<font color='orang'> Object.prototype.toString</font></strong> 【返回其调用者的具体类型 类型格式为<code>[object,xxx]</code>比较推荐】</p>\n<p>toString 是 Object 原型对象上的一个方法，该方法默认返回其调用者的具体类型，更严格的讲，是 toString 运行时 this 指向的对象类型，返回的类型格式为[object,xxx]，xxx 是具体的数据类型，其中包括：<br>String，Number，Boolean，Undefined，Null，Function，Date，Array，RegExp，Error，HTMLDocument，… 基本上所有对象的类型都可以通过这个方法获取到。</p>\n<hr>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object String]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Date]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object RegExp]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Error]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object HTMLDocument]</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[object Window]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结：</strong></h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> 可以准确地判断出基本类型，但是对于引用类型除 <span class=\"token keyword\">function</span> 之外返回的都是 object；\n已知是引用类型的情况可以选用 <span class=\"token keyword\">instanceof</span> 或 constructor 方法进行具体类型的判断：\n<span class=\"token keyword\">instanceof</span> 是基于原型链的；\n'constructor 属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给 constructor 赋值，以保证实例对象的类型不被改写；\n<span class=\"token comment\">//Object.prototype.toString.call() 通用但很繁琐。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、事件如何实现的？事件流？\"><a href=\"#4、事件如何实现的？事件流？\" class=\"headerlink\" title=\"4、事件如何实现的？事件流？\"></a>4、事件如何实现的？事件流？</h3><p><strong>事件：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//基于发布订阅模式，就是在浏览器加载的时候会读取事件相关的代码，但是只有实际等到具体的事件触发的时候才会执行。</span>\n<span class=\"token comment\">//比如点击按钮，这是个事件（Event），而负责处理事件的代码段通常被称为事件处理程序（Event Handler），也就是「启动对话框的显示」这个动作。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>在 Web 端，我们常见的就是 DOM 事件：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//DOM0 级事件，直接在 html 元素上绑定 on-event，比如 onclick，取消的话，dom.onclick = null，同一个事件只能有一个处理程序，后面的会覆盖前面的。</span>\n<span class=\"token comment\">//DOM2 级事件，通过 addEventListener 注册事件，通过 removeEventListener 来删除事件，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件。</span>\n<span class=\"token comment\">//DOM3 级事件，增加了事件类型，比如 UI 事件，焦点事件，鼠标事件等。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>事件流</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">事件流是网页元素接收事件的顺序，<span class=\"token string\">\"DOM2级事件\"</span>规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。'首先发生的事件捕获'，为截获事件提供机会。  然后是实际的<span class=\"token char\">'目标接受事件'</span>。最后一个阶段是<span class=\"token char\">'事件冒泡阶段'</span>，可以在这个阶段对事件做出响应。虽然捕获阶段在规范中规定不允许响应事件，但是实际上还是会执行，所以有两次机会获取到目标对象。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5、闭包\"><a href=\"#5、闭包\" class=\"headerlink\" title=\"5、闭包\"></a>5、闭包</h3><p>什么是闭包？ <font color='orang'>函数嵌套函数 能够读取其他函数内部变量的函数</font></p>\n<p>优点： 1、使用闭包是不会污染全局环境，2、方便进行模块化开发，3、可以在内存中维护一个变量</p>\n<p>缺点： 就是不恰当使用会造成内存泄漏 【解决方式：清除变量】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//闭包原理：定义在一个函数内部的函数(函数嵌套函数)，闭包就是将函数内部和函数外部连接起来的一座桥梁。</span>\n<span class=\"token comment\">//打破了作用域链的规则 闭包就是能够读取其他函数内部变量的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>闭包应用场景</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//原生的setTimeout传递的第一个函数不能带参数</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//通过闭包可以实现传参效果</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、call、apply、bind-的区别\"><a href=\"#5、call、apply、bind-的区别\" class=\"headerlink\" title=\"5、call、apply、bind 的区别\"></a>5、call、apply、bind 的区别</h3><p><strong>相同点：<code>call</code>、<code>apply</code>、<code>bind</code> 的共同点都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</strong></p>\n<p><strong>不同点：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//call() 和 apply() 是立即执行的，而 bind() 是返回一个函数。</span>\n<span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> '可以传递多个参数'，第一个参数和 <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 一样，是用来替换的对象，后面是参数列表。\n<span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> '最多只能有两个参数' —— 新<span class=\"token keyword\">this</span>对象和一个'参数数组或类数组 argArray'\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和其他两个方法的作用也是一致的，只是该方法会返回一个函数，并且可以'通过<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 实现柯里化'。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6、什么是-Promise？\"><a href=\"#6、什么是-Promise？\" class=\"headerlink\" title=\"6、什么是 Promise？\"></a>6、什么是 <a href=\"https://so.csdn.net/so/search?q=Promise&spm=1001.2101.3001.7020\">Promise</a>？</h3><p><strong><code>Promise</code> 是目前 JS <a href=\"https://so.csdn.net/so/search?q=%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B&spm=1001.2101.3001.7020\">异步编程</a>的一种解决方案</strong></p>\n<ul>\n<li>从语法上讲，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息；</li>\n<li>从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</li>\n</ul>\n<h4 id=\"Promise-原理简析-：\"><a href=\"#Promise-原理简析-：\" class=\"headerlink\" title=\"Promise 原理简析 ：\"></a>Promise 原理简析 ：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span>、Promise 本身相当于一个状态机，拥有三种状态：\n'<span class=\"token function\">pending</span><span class=\"token punctuation\">(</span>等待态<span class=\"token punctuation\">)</span>\n'<span class=\"token function\">fulfiled</span><span class=\"token punctuation\">(</span>成功态<span class=\"token punctuation\">)</span>\n'<span class=\"token function\">rejected</span><span class=\"token punctuation\">(</span>失败态<span class=\"token punctuation\">)</span>\n一个 Promise 对象初始化时的状态是 pending，调用了 resolve 后会将 Promise 的状态扭转为 fulfilled，调用 reject 后会将 Promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 Promise 到其他状态。\n\n<span class=\"token number\">2</span>、Promise 对象原型上有一个 then 方法，then 方法会返回一个新的 Promise 对象，并且将回调函数 <span class=\"token keyword\">return</span><span class=\"token string\">' 的结果作为该 Promise resolve 的结果'</span>，then 方法会在一个 Promise 状态被扭转为 fulfilled 或 rejected 时被调用。then 方法的<span class=\"token string\">'参数为两个函数'</span>，分别为 Promise 对象的状态被扭转为 fulfilled 和 rejected 对应的回调函数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Promise 使用</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//构造一个 Promise 对象，并将要执行的异步函数传入到 Promise 的参数中执行，并且在异步执行结束后调用 resolve() 函数，就可以在 Promise 的 then 方法中获取到异步函数的执行结果</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Promise<span class=\"token punctuation\">.</span>resolve 返回一个 fulfilled 状态的 Promise\n'Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>pa<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Promise.all 接收一个 Promise 对象数组作为参数，只有全部的 Promise 都已经变为 fulfilled 状态后才会继续后面的处理。Promise.all 本身返回的也是一个 Promise;</span>\n'Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Promise.race 和 Promise.all 类似，只不过这个函数会在 Promise 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7、js-脚本加载问题，async、defer\"><a href=\"#7、js-脚本加载问题，async、defer\" class=\"headerlink\" title=\"7、js 脚本加载问题，async、defer\"></a>7、js 脚本加载问题，async、defer</h3><ul>\n<li><p><strong>正常加载模式</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//这种情况下 JS 会阻塞浏览器，浏览器必须等待前面所有的 js 加载和执行完毕才能去做其它事情</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p><strong>async(异步) 模式</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行</span>\n<span class=\"token operator\">&lt;</span>script <span class=\"token keyword\">async</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p><strong>defer(延缓) 模式</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</span>\n<span class=\"token operator\">&lt;</span>script defer src<span class=\"token operator\">=</span><span class=\"token string\">\"index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p><strong>总结</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；</span>\n<span class=\"token comment\">//当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"8、获取-url-的-search-部分-【obj-new-URL-str-obj2-new-URLSearchParams-str2-】\"><a href=\"#8、获取-url-的-search-部分-【obj-new-URL-str-obj2-new-URLSearchParams-str2-】\" class=\"headerlink\" title=\"8、获取 url 的 search 部分 【obj = new URL(str) obj2 = new URLSearchParams(str2)】\"></a>8、获取 url 的 search 部分 【obj = new URL(str) obj2 = new URLSearchParams(str2)】</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://huodong.taobao.com/wow/a/act/tao/dailyact/4634/wupr?spm=a21bo.jianhua.201867-main.1.5af911d97F6TPV&amp;wh_pid=dailyAct-257518\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wh_pid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> str2 <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"?spm=a21bo.jianhua.201867-main.1.5af911d97F6TPV&amp;wh_pid=dailyAct-257518\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wh_pid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":" html 部分1. DOCTYPE 有什么作用？告诉浏览器使用哪个版本的 HTML 规范来渲染文档。DOCTYPE 不存在或形式不正确会导致 HTML 文档以混杂模式呈现。 2.页面导入样式时，使用 link 和 @import 有什么区别？link 引用 CSS 时候，页面载...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"web前端","slug":"web前端","count":3,"path":"api/categories/web前端.json"}],"tags":[{"name":"学习总结","slug":"学习总结","count":1,"path":"api/tags/学习总结.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#html-%E9%83%A8%E5%88%86\"><span class=\"toc-text\">html 部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-DOCTYPE-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1. 　 DOCTYPE 　有什么作用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%A1%B5%E9%9D%A2%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F%E6%97%B6%EF%BC%8C%E4%BD%BF%E7%94%A8-link-%E5%92%8C-import-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2.页面导入样式时，使用 link 和 @import 有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%AF%B7%E5%86%99%E5%87%BA-HTML-%E5%9D%97%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE%E3%80%81%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE%E3%80%81%E7%A9%BA-void-%E5%85%83%E7%B4%A0%E6%9C%89%E9%82%A3%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.请写出 HTML 块元素标签、行内元素标签、空(void)元素有那些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-HTML5-%E7%9A%84%E6%96%87%E4%BB%B6%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">4.HTML5 的文件离线储存怎么使用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-SVG-%E4%B8%8E-Canvas\"><span class=\"toc-text\">5. SVG 与 Canvas</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%AF%B7%E7%94%A8-html-%E7%9F%A5%E8%AF%86%E8%A7%A3%E5%86%B3-seo-%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">6.请用 html 知识解决 seo 优化问题？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%B8%B8%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E5%86%85%E6%A0%B8%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F\"><span class=\"toc-text\">7.常用浏览器有哪些，内核都是什么，内核的理解？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA-progressive-enhancement-%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7-graceful-degradation-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">8.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 的区别?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E4%BB%80%E4%B9%88%E6%98%AF-FOUC%EF%BC%88%E6%96%87%E6%A1%A3%E6%A0%B7%E5%BC%8F%E7%9F%AD%E6%9A%82%E5%A4%B1%E6%95%88%EF%BC%89\"><span class=\"toc-text\">9.什么是 FOUC（文档样式短暂失效）?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-Cookie%EF%BC%8CsessionStorage-%E5%92%8C-localStorage-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">10.Cookie，sessionStorage 和 localStorage 的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#indexedDB-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">indexedDB 介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">11.如何实现浏览器内多个标签页之间的通信?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%B8%B2%E6%9F%93%EF%BC%9F\"><span class=\"toc-text\">12.什么是渐进式渲染？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#css3-%E9%83%A8%E5%88%86\"><span class=\"toc-text\">css3 部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-CSS3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">1. CSS3 有哪些新特性？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B-Flexbox-%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B-%EF%BC%9F%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F\"><span class=\"toc-text\">2.解释一下 Flexbox (弹性盒布局模型)？及适用场景？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-CSS3-%E6%96%B0%E5%A2%9E%E4%BC%AA%E7%B1%BB%E6%9C%89%E9%82%A3%E4%BA%9B\"><span class=\"toc-text\">3.CSS3 新增伪类有那些?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%EF%BC%9F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.为什么要清除浮动？清除浮动的方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-before-%E5%92%8C-after-%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E8%BF%99-2-%E4%B8%AA%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">5.::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%AE%A9%E9%A1%B5%E9%9D%A2%E9%87%8C%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%98%E6%B8%85%E6%99%B0%EF%BC%8C%E5%8F%98%E7%BB%86%E7%94%A8-CSS-%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F\"><span class=\"toc-text\">6.让页面里的字体变清晰，变细用 CSS 怎么做？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E5%86%99%E5%8A%A8%E7%94%BB%EF%BC%8C%E4%BD%A0%E8%AE%A4%E4%B8%BA%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E6%98%AF%E5%A4%9A%E4%B9%85%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">7.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">8.什么是响应式设计？响应式设计的基本原理是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-Sass%E3%80%81Less-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A4%A7%E5%AE%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BB%96%E4%BB%AC%EF%BC%9F\"><span class=\"toc-text\">9.Sass、Less 是什么？大家为什么要使用他们？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-display-inline-block-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%97%B4%E9%9A%99%EF%BC%9F\"><span class=\"toc-text\">10.display:inline-block 什么时候会显示间隙？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%A7%A3%E6%9E%90-CSS-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">11.浏览器是怎样解析 CSS 选择器的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-CSS-%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">12. CSS 优化、提高性能的方法有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E9%98%90%E8%BF%B0%E4%B8%80%E4%B8%8B-CSS-Sprites%EF%BC%88%E9%9B%AA%E7%A2%A7%E5%9B%BE%EF%BC%89\"><span class=\"toc-text\">13.阐述一下 CSS Sprites（雪碧图）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E5%B8%83%E5%B1%80%E7%94%A8%E8%BF%87%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">14.移动端的布局用过媒体查询吗？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E4%B8%8A%E4%B8%8B-margin-%E9%87%8D%E5%90%88%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">15.上下 margin 重合的问题?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js-%E9%83%A8%E5%88%86\"><span class=\"toc-text\">js 部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%810-1-0-2-0-3-%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9Ffalse\"><span class=\"toc-text\">1、0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3 ？为什么？false</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2、JS 数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD-JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3、如何判断 JS 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BA%8B%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F%E4%BA%8B%E4%BB%B6%E6%B5%81%EF%BC%9F\"><span class=\"toc-text\">4、事件如何实现的？事件流？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">5、闭包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81call%E3%80%81apply%E3%80%81bind-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">5、call、apply、bind 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-Promise%EF%BC%9F\"><span class=\"toc-text\">6、什么是 Promise？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Promise-%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90-%EF%BC%9A\"><span class=\"toc-text\">Promise 原理简析 ：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81js-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%EF%BC%8Casync%E3%80%81defer\"><span class=\"toc-text\">7、js 脚本加载问题，async、defer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%8E%B7%E5%8F%96-url-%E7%9A%84-search-%E9%83%A8%E5%88%86-%E3%80%90obj-new-URL-str-obj2-new-URLSearchParams-str2-%E3%80%91\"><span class=\"toc-text\">8、获取 url 的 search 部分 【obj &#x3D; new URL(str) obj2 &#x3D; new URLSearchParams(str2)】</span></a></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Pinia菠萝——Vue的最新状态存储库","uid":"9a20f08646fc7ae20aeb4af73512aebe","slug":"【Pinia菠萝】——Vue最新的状态存储库","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/【Pinia菠萝】——Vue最新的状态存储库.json","keywords":null,"cover":[],"text":"【Pinia 菠萝】——Vue 的最新状态存储库Pinia 是什么?Pinia 是一个用于 Vue 的状态管理库，类似 Vuex, 是 Vue 的另一种状态管理方案 Pinia 支持 Vue2 和 Vue3 Pinia 优势mutations 不再存在,更加简洁直观，减少代码冗余...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[{"name":"Pinia菠萝","slug":"Pinia菠萝","count":1,"path":"api/tags/Pinia菠萝.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}