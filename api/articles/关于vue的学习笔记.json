{"title":"关于vue2","uid":"3324d7472bb09e978be8ffc008c4f887","slug":"关于vue的学习笔记","date":"2022-12-26T13:14:11.605Z","updated":"2023-02-01T05:46:25.403Z","comments":true,"path":"api/articles/关于vue的学习笔记.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/hz2.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"MVVM-的理解\"><a href=\"#MVVM-的理解\" class=\"headerlink\" title=\"MVVM 的理解\"></a>MVVM 的理解</h1><hr>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token constant\">MVVM</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 表示的是 </span><span class=\"token template-punctuation string\">`</span></span>Model<span class=\"token operator\">-</span>View<span class=\"token operator\">-</span>ViewModel\n<span class=\"token number\">1</span>：<span class=\"token constant\">MVVM</span> 是Model<span class=\"token operator\">-</span>View<span class=\"token operator\">-</span>ViewModel 的缩写，它是一种基于前端开发的架构模式。\n\n<span class=\"token number\">2</span>：其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。\n\n<span class=\"token number\">3</span>：以Vue<span class=\"token punctuation\">.</span>js 为例。Vue是一个提供了 <span class=\"token constant\">MVVM</span> 风格的双向数据绑定的 Javascript 库，专注于View 层。\n\n<span class=\"token number\">4</span>：它的核心是 <span class=\"token constant\">MVVM</span> 中的 <span class=\"token constant\">VM</span>，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发\n更加高效、便捷。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Model：模型层，负责处理业务逻辑以及和服务器进行交互。<br>View：视图层，负责将数据模型转化为 UI 显示出来，可以简单的理解为 HTML 页面。<br>ViewModel：试图模型层，用来连接 Model 和 View ，是 Model 和 View 之间的桥梁。每当 V 层获取或者保存数据的时候，都要由 VM 层做中间的处理，从而交给 M 层。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">MVVM 模式简化了界面和业务的依赖，解决了数据频繁更新。MVVM 在使用当中，利用了双向绑定技术，使得 Model 在变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"vue-的优缺点\"><a href=\"#vue-的优缺点\" class=\"headerlink\" title=\"vue 的优缺点\"></a>vue 的优缺点</h1><hr>\n<h4 id=\"vue2-优点：\"><a href=\"#vue2-优点：\" class=\"headerlink\" title=\"vue2 优点：\"></a>vue2 优点：</h4><p>1**.轻量级框架（渐进式框架）**：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb</p>\n<p>2**.简单易学（尤雨溪）**：国人开发，中文文档，不存在语言障碍，易于理解和学习</p>\n<p>3.<strong>双向数据绑定</strong>：双向是指 ViewModel 中的 data 部分和 View 之间的双向关系。</p>\n<p>​ 正向：数据驱动页面 反向：页面更新数据</p>\n<p>​ 绑定是指自动化处理，data 改变了 view 随之改变，反之也是。</p>\n<hr>\n<h1 id=\"v-for-为什么要加-key\"><a href=\"#v-for-为什么要加-key\" class=\"headerlink\" title=\"v-for 为什么要加 key\"></a>v-for 为什么要加 key</h1><p>给属性一个唯一值，找到相同的元素，直接进行复用 （<strong>使用 key 属性可以让 diff 算法更高效，提高渲染效率）</strong></p>\n<p><strong>vue 中使用 v-for 时为什么不能用 index 作为 key</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//当以数组为下标的index作为key值时，其中一个元素(例如增删改查)发生了变化就有可能导致所有的元素的key值发生改变diff算法时比较同级之间的不同，以key来进行关联，当对数组进行下标的变换时，比如删除第一条数据，那么以后所有的index都会发生改变，那么key自然也跟着全部发生改变，所以index作为key值是不稳定的，而这种不稳定性有可能导致性能的浪费，导致diff无法关联起上一次一样的数据。因此，能不使用index作为key就不使用index。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"v-if-和-v-show-的区别\"><a href=\"#v-if-和-v-show-的区别\" class=\"headerlink\" title=\"v-if 和 v-show 的区别\"></a>v-if 和 v-show 的区别</h1><p><strong>v-for</strong>比<strong>v-if</strong>有<strong>更高</strong>的<strong>优先级，</strong>所以两个不能一起使用（vue3 解决了这个问题)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// v-show，无论初始条件是什么元素都会渲染，它是基于简单地css渲染（给元素添加display：none）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// v-if，是真正的条件渲染，在切换过程中条件块内事件监听和子组件适当地被销毁和重建</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>总结：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">'  一般来说，v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 有更高的切换开销，而 v<span class=\"token operator\">-</span>show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v<span class=\"token operator\">-</span>show 较好；如果在运行时条件很少改变，则使用 v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 较好<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-常用修饰符（事件、按键、v-model）\"><a href=\"#vue-常用修饰符（事件、按键、v-model）\" class=\"headerlink\" title=\"vue 常用修饰符（事件、按键、v-model）\"></a>vue 常用修饰符（事件、按键、v-model）</h1><p><strong>事件修饰符</strong></p>\n<p>.stop 阻止事件继续传播<br>.prevent 阻止标签默认行为<br>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<br>.self 只当在 event.target 是当前元素自身时触发处理函数<br>.once 事件将只会触发一次<br>.passive 告诉浏览器你不想阻止事件的默认行为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>v-model 修饰符</strong></p>\n<ul>\n<li><strong>.lazy</strong> - <strong>将 oninput 事件 切换成 onchange 事件</strong></li>\n<li><strong>.numbe</strong>r - <strong>输入字符串转为有效的数字</strong></li>\n<li><strong>.trim</strong> - <strong>输入首尾空格过</strong></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>trim<span class=\"token operator\">=</span><span class=\"token string\">\"msg\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>键盘事件的修饰符</strong></p>\n<p><strong>enter 回车键</strong><br><strong>.tab 制表键</strong><br><strong>.esc 返回键</strong><br><strong>.space 空格键</strong><br><strong>.up 向上键</strong><br><strong>.down 向下键</strong><br><strong>.left 向左建</strong><br><strong>.right 向右键</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>input @keyup<span class=\"token punctuation\">.</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>修饰键：(也叫系统修饰符)</strong></p>\n<p><strong>.ctrl</strong><br><strong>.alt</strong><br><strong>.shift</strong><br><strong>.meta （就是 ctrl 旁边的 window 图标键</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 按下Ctrl <span class=\"token operator\">+</span> enter时触发 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>input @keydown<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span><span class=\"token number\">13</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>v-bind 修饰符</strong></p>\n<p>.sync .<a href=\"https://so.csdn.net/so/search?q=sync&spm=1001.2101.3001.7020\">sync</a>修饰符，它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>comp <span class=\"token operator\">:</span>foo<span class=\"token punctuation\">.</span>sync<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">></span>\n扩展成\n<span class=\"token operator\">&lt;</span>comp <span class=\"token operator\">:</span>foo<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> @update<span class=\"token operator\">:</span>foo<span class=\"token operator\">=</span><span class=\"token string\">\"val => bar = val\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>comp<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"keep-alive-的作用是什么？原理是什么\"><a href=\"#keep-alive-的作用是什么？原理是什么\" class=\"headerlink\" title=\"keep-alive 的作用是什么？原理是什么\"></a>keep-alive 的作用是什么？原理是什么</h1><p>Vue 的内置组件，当它包裹动态组件时，会缓存不活动的组件实例</p>\n<p><strong>作用：</strong> 在组件切换过程中将状态保留在<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020\">内存</a>中，防止重复渲染 DOM，减少加载时间及性能消耗，提高用户体验性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. 将缓存 name 为 test 的组件(基本）</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive include<span class=\"token operator\">=</span><span class=\"token string\">'test'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token comment\">// 2. 将缓存 name 为 a 或者 b 的组件，结合动态组件使用</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive include<span class=\"token operator\">=</span><span class=\"token string\">'a,b'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token comment\">// 3. 使用正则表达式，需使用 v-bind</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">'/a|b/'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token comment\">// 4.动态判断</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">'includedComponents'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token comment\">// 5. 将不缓存 name 为 test 的组件</span>\n<span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive exclude<span class=\"token operator\">=</span><span class=\"token string\">'test'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>生命周期函数</strong></p>\n<ol>\n<li><strong>activated</strong>:在组件被激活时调用，在组件第一次渲染时也会被调用，之后每次 keep-alive 激活时被调用。</li>\n<li><strong>deactivated</strong>：在组件被停用时调用。</li>\n</ol>\n<p><strong>注意：</strong> 只有组件被 keep-alive 包裹时，这两个生命周期才会被调用，如果作为正常组件使用</p>\n<p><strong>应用场景</strong></p>\n<p>如果未使用 keep-alive 组件，则在页面回退时仍然会重新渲染页面，触发 created 钩子，使用体验不好。</p>\n<p>在以下场景中使用 keep-alive 组件会显著提高用户体验，菜单存在多级关系（如：主页 -&gt; 列表页 -&gt; 详情页）的场景：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//1.当从主页跳转列表页时，列表页组件重新渲染；</span>\n<span class=\"token comment\">//2.当从详情页返回列表页时，列表页组件缓存 不重新请求数据</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>我们还可以通过路由中的 meta 属性来控制，是否需要缓存</strong></p>\n<p>将 test 路由中的 meta 添加 keepAlive 属性为 true，表示当前路由组件要进行缓存。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../views/home.vue'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">keepAlive</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../views/test.vue'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>keep-alive 代码可以结合 v-if 进行包裹，如果 meta 中的 keepAlive 为 true 进行缓存，否侧不进行缓存。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"$route.meta.keepAlive\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token comment\">//缓存显示</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!$route.meta.keepAlive\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//不缓存显示</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实际开发中，我们可以结合路由守卫来实现需要缓存组件的缓存。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>keepAlive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"虚拟-DOM-的理解\"><a href=\"#虚拟-DOM-的理解\" class=\"headerlink\" title=\"虚拟 DOM 的理解\"></a>虚拟 DOM 的理解</h1><hr>\n<p>可以那么说：</p>\n<p>比方说有一段 html 代码，不是直接渲染，而是将 html 代码转成一个 js 的对象，这个对象存在浏览器内存中。当我们要去修改这个 html 的时候，不是不是修改，而是修改那个 js 对象，等待所有的修改都结束了，再一次性地转回成 html，渲染出来。</p>\n<p>什么是 diff 算法？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 同级比较：目的是较少的比较次数，减低时间复杂度</span>\n<span class=\"token comment\">// key的比较：目的找到相同的元素，直接进行复用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-中组件的传值方式\"><a href=\"#vue-中组件的传值方式\" class=\"headerlink\" title=\"vue 中组件的传值方式\"></a>vue 中组件的传值方式</h1><hr>\n<p><strong>父传子</strong>:</p>\n<ol>\n<li><p>在父组件的子组件标签上面添加自定义属性；在子组件里面添加 props 选项用于接受自定义属性</p>\n</li>\n<li><p>使用插槽 接收</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template #abc<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>名字<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>template #<span class=\"token keyword\">default</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>具名插槽 <span class=\"token operator\">--</span>默认（<span class=\"token keyword\">default</span>）<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n接收\n<span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>slot<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用 this.$root访问根实例，使用this.$parent 访问父组件实例</p>\n</li>\n<li><p>依赖注入（vue2 没有响应式）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// provide提供者，依赖</span>\n       <span class=\"token comment\">// 向所有的子孙组件传递一个msg属性</span>\n       <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// inject注入</span>\n       <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>子传父</strong>:</p>\n<ol>\n<li><p>在父组件的子组件标签上面添加自定义事件；在子组件里面调用 this.$emit(“事件名称”, “值”)去传递</p>\n</li>\n<li><p>使用 this.refs.xxx 来访问子组件实例</p>\n</li>\n<li><p>作用域插槽</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template #default&#x3D;&quot;&#123; abc &#125;&quot;&gt;\n  &#x2F;&#x2F; 只能单取\n  &lt;span&gt;&#123;&#123; abc &#125;&#125;&lt;&#x2F;span&gt;\n&lt;&#x2F;template&gt;\n\n&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;\n  &#x2F;&#x2F; scope 代表该作用域范围所有参数\n  &lt;div&gt;&#123;&#123; scope.tit &#125;&#125;&lt;&#x2F;div&gt;\n  &lt;div&gt;&#123;&#123; scope.msg &#125;&#125;&lt;&#x2F;div&gt;\n  &lt;div&gt;&#123;&#123; scope.names &#125;&#125;&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&#x2F;&#x2F; 子组件 data() &#123; return &#123; count: 10, name:&#39;ahha&#39; &#125;; &#125;,\n&lt;slot :abc&#x3D;&quot;count&quot;&gt;&lt;&#x2F;slot&gt;\n&lt;slot :names&#x3D;&quot;name&quot;&gt;&lt;&#x2F;slot&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>兄弟传值</strong>:</p>\n<p>通过中央通信 let bus = new Vue()</p>\n<p>A：methods :{ 函数{bus.$emit(‘自定义事件名’，数据)} 发送</p>\n<p>B：created （）{bus.$on(‘A 发送过来的自定义事件名’，函数)} 进行数据接收</p>\n<p>通过中间件</p>\n<p><strong>传值：this.parent.$emit</strong>(“事件名”，”值”)或者<strong>this.root.$emit(</strong>(“事件名”，”值”**)**，</p>\n<p><strong>接收</strong>：<strong>this.parent.$on</strong>(“事件名”，（“值”)=&gt;{}）或者<strong>this.root.$on</strong>(“事件名”，（“值”)=&gt;{})</p>\n<hr>\n<h1 id=\"vue-组件中的-data-为什么是个函数\"><a href=\"#vue-组件中的-data-为什么是个函数\" class=\"headerlink\" title=\"vue 组件中的 data 为什么是个函数\"></a>vue 组件中的 data 为什么是个函数</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的data会同时被修改；而使用返回对象的函数，由于每次返回的都是一个新对象（Object的实例），引用地址不同，则不会出现这个问题。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"computed-和-watch-的区别\"><a href=\"#computed-和-watch-的区别\" class=\"headerlink\" title=\"computed 和 watch 的区别\"></a><strong>computed 和 watch 的区别</strong></h1><hr>\n<p>computed(计算属性)：</p>\n<ol>\n<li><p>有缓存，他是被动的，只有当它依赖的响应数据改变，才会改变</p>\n</li>\n<li><p>计算属性可以同时依赖多个值</p>\n</li>\n<li><p><strong>根据 data 里的值加工计算出新的返回值</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">'$'</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money<span class=\"token operator\">+</span><span class=\"token string\">\"!\"</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">reverseStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//缓存</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n   data里的值变化了，会重新计算，值不变，会缓存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>计算属性默认是只读的，也可以修改</strong>（通过 get 和 set 修改）<img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220816091914677.png\" alt=\"image-20220816091914677\"></p>\n</li>\n</ol>\n<p>watch(监听属性)：</p>\n<ol>\n<li><p>没有缓存，他是主动的，自己发生了改变，从而执行其他的事情</p>\n</li>\n<li><p>侦听属性只能侦听一个值</p>\n</li>\n<li><p>监听的函数接收两个参数，第一个是最新的值；第二个是输入之前的值</p>\n</li>\n<li><p>可以写成<strong>handler</strong>形式 【高级用法】</p>\n</li>\n<li><p>有两个属性：</p>\n<p><strong>immediate</strong>：组件加载立即触发回调函数执行</p>\n<p><strong>deep:</strong> deep 的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改<strong>obj</strong>里面任何一个属性都会触发这个监听器里的 handler</p>\n<p>一般监听<strong>对象</strong>和<strong>数组 （</strong>对<strong>复杂类型</strong>进行<strong>深度监听</strong></p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'333'</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'newVal'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1234</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oldVal'</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 123</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">form</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'newVal'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oldVal'</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>  <span class=\"token comment\">//深度监听，复杂类型，以监听到对象内部属性的改变</span>\n             <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 组件加载立即触发回调函数执行,false就是值变化才发生</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"immediate-监听的时候是否可以获取-dom-元素\"><a href=\"#immediate-监听的时候是否可以获取-dom-元素\" class=\"headerlink\" title=\"immediate 监听的时候是否可以获取 dom 元素\"></a><strong>immediate 监听的时候是否可以获取 dom 元素</strong></h2><p><strong>不能</strong>（测试出来结果是 undefined），可以在$nextTick 里面获取，或者在 mounted 获取</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 当数据改变（改变数据时同步） 视图刷新（更新dom，异步 中间要通知观察者，调用render生成虚拟dom，比较两个虚拟dom用diff算法，在更新）</span>\n<span class=\"token comment\">// 所有 我们无法 立即获取，数据改变后生成最新的dom</span>\n<span class=\"token comment\">// vue 提供了一个watcher(观察每一次的dom更新，更新完成后，回调触发，在回调中获取最新的dom)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 在这里获取最新的dom <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 在这里获取最新的dom <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Watch-和-computed-的区别\"><a href=\"#Watch-和-computed-的区别\" class=\"headerlink\" title=\"Watch 和 computed 的区别\"></a>Watch 和 computed 的区别</h2><p>computed 支持缓存，只有依赖数据发生改变,才会重新进行计算;而 watch 不支持缓存，数据变,直接会触发相应的操作</p>\n<p>computed 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化，而 watch 支持异步</p>\n<p>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值;而 watch 监听的函数接收两个参数，第一个参数是最新的值，第二个参数是输入之前的值</p>\n<p>如果一个属性是由其它属性计算而来的，这个属性依赖其它属性，多对一或者一对一，一般用 computed；而当一个属性发生变化时，需要执行对应的操作，一对多，一般用 watch。</p>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220816103853851.png\" alt=\"image-20220816103853851\"></p>\n<h1 id=\"nextTick-的使用\"><a href=\"#nextTick-的使用\" class=\"headerlink\" title=\"$nextTick 的使用\"></a>$nextTick 的使用</h1><hr>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">异步更新队列\n将里面的内容放到下一次事件轮询里面执行\n等待页面渲染完再执行\nvue并不是数据改变后dom立即更新，而是等所有数据修改之后才会更新，所以$nextTick可以在页面渲染完成之后再执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>经典运用场景： better-scroll 滚动插件，请求到数据后高度撑开后页面未渲染而失效</p>\n<p>在使用某个第三方插件时 ，希望在 vue 生成的某些 dom 动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">testMsg</span><span class=\"token operator\">:</span><span class=\"token string\">\"原始值\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">changeTxt</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> that<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n      that<span class=\"token punctuation\">.</span>testMsg<span class=\"token operator\">=</span><span class=\"token string\">\"修改后的文本值\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//修改dom结构</span>\n\n      that<span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//使用vue.$nextTick()方法可以dom数据更新后延迟执行</span>\n        <span class=\"token keyword\">let</span> domTxt<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>domTxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//输出可以看到vue数据修改后并没有DOM没有立即更新，</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>domTxt<span class=\"token operator\">===</span><span class=\"token string\">\"原始值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文本data被修改后dom内容没立即更新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文本data被修改后dom内容被马上更新了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-中-bus-的使用弊端-【事件总线】\"><a href=\"#vue-中-bus-的使用弊端-【事件总线】\" class=\"headerlink\" title=\"vue 中 bus 的使用弊端 【事件总线】\"></a>vue 中 bus 的使用弊端 【事件总线】</h1><p><strong>优点：</strong> 传递数据较为方便，可以进行兄弟之间，父子之间的传递<br><strong>缺点：</strong> 必须先 on<a href=\"https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020\">监听</a>才能进行 emit 触发,<strong>$on 事件是不会自动销毁的。需要我们手动来销毁。</strong></p>\n<p>创建 Bus.js 文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//抛出Bus 供传输数据的组件引用  代码-->></span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> bus<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>引用组件</strong><br>谁用谁引用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">\"../common/bus.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//触发，“changeCurrentMsg”为触发的信号名</span>\nBus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeCurrentPage\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>接受信息</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/bus.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建时就要监听，也可以在created中监听</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tBus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeCurrentPage\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\t                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentPage<span class=\"token operator\">=</span>val<span class=\"token punctuation\">;</span>\n\t       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//记得销毁，不然会叠加调用监听</span>\n beforDestroy（）<span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vaPage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//当这个组件销毁的时候bus也跟着一起销毁</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 vue-bus 公共组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、安装：npm install vue-bus\n2、在main.js中引入vue-bus\nimport Vue from &#39;vue&#39;;\nimport VueBus from &#39;vue-bus&#39;;\nVue.use(VueBus);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在组件中使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//触发事件</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeCurrentPage\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>；\n<span class=\"token comment\">//接受事件</span>\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeCurrentPage\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\t           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentPage<span class=\"token operator\">=</span>val<span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//组件销毁接触事件绑定</span>\n<span class=\"token function-variable function\">destroyed</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n　　<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeCurrentPage\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-的生命周期的理解和各个钩子的实际使用场景\"><a href=\"#vue-的生命周期的理解和各个钩子的实际使用场景\" class=\"headerlink\" title=\"vue 的生命周期的理解和各个钩子的实际使用场景\"></a>vue 的生命周期的理解和各个钩子的实际使用场景</h1><hr>\n<p>Vue2.0</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeCreated\n<span class=\"token comment\">// 在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。  不能访问数据</span>\ncreated\n<span class=\"token comment\">// 在实例创建完成后被立即同步调用  可以访问数据，但是拿不到真实的dom节点</span>\nbeforeMount\n<span class=\"token comment\">// 在挂载开始之前被调用</span>\nmounted\n<span class=\"token comment\">// 实例被挂载后调用  既可以拿到数据也可以拿到节点  可以拿到真的dom节点可以进行dom操作</span>\n通过ref拿到节点\n<span class=\"token operator\">&lt;</span>p ref<span class=\"token operator\">=</span><span class=\"token string\">\"parogram\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>parogram 拿到节点\nbeforeUpdate\n<span class=\"token comment\">// 在数据发生改变后，DOM 被更新之前被调用</span>\nupdated\n<span class=\"token comment\">// 在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用</span>\nbeforeDestroy\n<span class=\"token comment\">// 实例销毁之前调用。在这一步，实例仍然完全可用。 清理资源，防止内存泄露</span>\ndestroyed\n<span class=\"token comment\">// 实例销毁后调用</span>\n缓存阶段\nactivated<span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 被 keep-alive 缓存的组件激活时调用。</span>\ndeactivated<span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 被 keep-alive 缓存的组件失活时调用。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>创建前/后</th>\n<th align=\"left\">在<strong>beforeCreate</strong>阶段，vue 实例的挂载元素 el 和数据对象 data 都为 undefined（<strong>拿不到 data，不能做数据请求</strong>），还未初始化。在<strong>created</strong>阶段，vue 实例的数据对象 data 有了（<strong>能拿到 data，可以做数据请求</strong>），el 为 undefined，还未初始化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>载入前/后</td>\n<td align=\"left\">在<strong>beforeMount</strong>阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换（<strong>可以做数据请求）</strong>。在<strong>mounted</strong>阶段，vue 实例挂载完成，data.message 成功渲染（<strong>可以做数据请求，获取 dom 节点）</strong></td>\n</tr>\n<tr>\n<td>更新前/后</td>\n<td align=\"left\">当 data 变化时，会触发 beforeUpdate 和 updated 方法<strong>（数据改变后触发，数据得用，不能在 updataed 修改数据，会造成死循环）</strong></td>\n</tr>\n<tr>\n<td>销毁前/后</td>\n<td align=\"left\">在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在<strong>（beforeDestroy——关闭定时器、事件监听、第三方插件、websocket, destroyed 不做事情）</strong></td>\n</tr>\n<tr>\n<td>错误处理阶段</td>\n<td align=\"left\">errorCaptured ， 用于捕获子组件的错误，然后显示回退 UI[就是一个界面，错误处理钩子函数是写在 父组件中，触发条件： 子组件出问题了</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p><strong>created</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">可以访问获取数据\n修改数据不会触发 beforeUpdate,updated钩子函数\n可以正常向后端发起请求获取数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>mounted</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">可以访问获取数据\n修改数据会触发 beforeUpdate,updated钩子函数\nthis.$refs找到 ref 表示的节点\n可以正常向后端发起请求获取数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated:\"></a>updated:</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">生命周期 <span class=\"token operator\">-</span> 更新阶段\n    <span class=\"token number\">1.</span> 触发条件： 数据改变【 数据得用 】 <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n    <span class=\"token number\">2.</span> 触发次数： 多次 <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span>\n    <span class=\"token number\">3.</span> <span class=\"token literal-property property\">updated</span><span class=\"token operator\">:</span>  可以做真实<span class=\"token constant\">DOM</span>操作，可以发送数据请求 <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>特别注意:不要在 <strong>update</strong> <strong>beforeUpdate</strong> 修改数据，否则会引起死循环</em></p>\n<h3 id=\"相关面试题：\"><a href=\"#相关面试题：\" class=\"headerlink\" title=\"相关面试题：\"></a>相关面试题：</h3><h3 id=\"初始化阶段，我们哪里拿到了虚拟-DOM-呢？\"><a href=\"#初始化阶段，我们哪里拿到了虚拟-DOM-呢？\" class=\"headerlink\" title=\"初始化阶段，我们哪里拿到了虚拟 DOM 呢？\"></a>初始化阶段，我们哪里拿到了虚拟 DOM 呢？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">created之后，beforeMount前<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"初始化阶段，我们哪里拿到了真实-DOM-呢？\"><a href=\"#初始化阶段，我们哪里拿到了真实-DOM-呢？\" class=\"headerlink\" title=\"初始化阶段，我们哪里拿到了真实 DOM 呢？\"></a>初始化阶段，我们哪里拿到了真实 DOM 呢？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">mounted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序\"><a href=\"#如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序\" class=\"headerlink\" title=\"如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序\"></a>如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">3.1 父组件： beforeCreate created  beforeMount\n3.2 子组件： beforeCreate created  beforeMount  mounted\n3.3 父组件： mounted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"更新阶段真实-DOM-哪里可以拿到？\"><a href=\"#更新阶段真实-DOM-哪里可以拿到？\" class=\"headerlink\" title=\"更新阶段真实 DOM 哪里可以拿到？\"></a>更新阶段真实 DOM 哪里可以拿到？</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">updated<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"父组件更新阶段触发了，子组件是否会重新渲染\"><a href=\"#父组件更新阶段触发了，子组件是否会重新渲染\" class=\"headerlink\" title=\"父组件更新阶段触发了，子组件是否会重新渲染\"></a>父组件更新阶段触发了，子组件是否会重新渲染</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">父子组件是否有通信[恰好就是通信的数据改了]，\n  有的话应该会的\n  没有的话就不会了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"子组件更新阶段触发了，父组件是否会重新渲染\"><a href=\"#子组件更新阶段触发了，父组件是否会重新渲染\" class=\"headerlink\" title=\"子组件更新阶段触发了，父组件是否会重新渲染\"></a>子组件更新阶段触发了，父组件是否会重新渲染</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">父子组件是否有通信[恰好就是通信的数据改了]，，\n  有的话应该会的\n  没有的话就不会了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-中从-created-和-mouthed-中发送请求的区别是什么\"><a href=\"#vue-中从-created-和-mouthed-中发送请求的区别是什么\" class=\"headerlink\" title=\"vue 中从 created 和 mouthed 中发送请求的区别是什么\"></a>vue 中从 created 和 mouthed 中发送请求的区别是什么</h1><p>created</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// created在模板渲染成html前调用，此时的data已经准备完毕，el仍然是underfined，因此没有渲染成html，所以不能操作dom节点，它主要用来初始化一些数据；</span>\n\n<span class=\"token comment\">// 即使created中的方法没有执行完，mounted也会被调用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>mounted</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mounted在模板渲染成真实的html之后调用的，此时data，el都已经准备好了，可以操作html的dom节点，可以通过id之类的查找元素，也可以加载一些组件等。</span>\n\n<span class=\"token comment\">// 挂载到阶段上的初始化方法通常用mounted去操作，主动调起的用methods里面封装方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"router-和-route-区别\"><a href=\"#router-和-route-区别\" class=\"headerlink\" title=\"$router 和 $route 区别\"></a>$router 和 $route 区别</h1><hr>\n<p><strong>$ router</strong> <strong>路由操作对象 ，只写对象</strong></p>\n<p><strong>$ route <strong>是用来</strong>获取路由信息</strong>的,只读对象</p>\n<p><strong>$router 是 VueRouter 的一个实例</strong></p>\n<p>他包含了所有的路由，包括路由的跳转方法，<a href=\"https://so.csdn.net/so/search?q=%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020\">钩子函数</a>等，也包含一些子对象（例如 history）</p>\n<p>常用的跳转连接的方法： **this.$router.push( ) ** <strong>this.$router.replace( )</strong> <strong>tihs.$router.go( )</strong></p>\n<p><strong>thi.$router.push( )</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用对象的形式 不带参数</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">\"/login\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用对象的形式，参数为地址栏上的参数</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n使用对象的形式 ，参数为params 不会显示在地址栏\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'user'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>this.$router.replace( )</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，\n不会向 history 栈添加一个新的记录\n\n一般使用replace来做<span class=\"token number\">404</span>页面\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>’<span class=\"token operator\">/</span>’<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>tihs.$router.go( )</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 页面路由跳转 前进或者后退</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后退</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前进</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>$ route</strong>是用来<strong>获取路由信息</strong>的</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200924182516695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FnMjI3Njg3OTM3OQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"img\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span>、$route<span class=\"token punctuation\">.</span>path\n<span class=\"token comment\">// 字符串，对应当前路由的路径，总是解析为绝对路径，如 “/foo/bar”。</span>\n\n<span class=\"token number\">2</span>、$route<span class=\"token punctuation\">.</span>params\n<span class=\"token comment\">// 一个 key/value 对象，包含了 动态片段 和 全匹配片段，</span>\n<span class=\"token comment\">// 如果没有路由参数，就是一个空对象。</span>\n\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query\n一个 key<span class=\"token operator\">/</span>value 对象，表示 <span class=\"token constant\">URL</span> 查询参数。\n<span class=\"token comment\">// 例如，对于路径 /foo?user=1，则有 $route.query.user == 1，</span>\n<span class=\"token comment\">// 如果没有查询参数，则是个空对象。</span>\n\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>hash\n当前路由的 hash <span class=\"token function\">值</span> <span class=\"token punctuation\">(</span>不带 #<span class=\"token punctuation\">)</span> ，如果没有 hash 值，则为空字符串。锚点\n\n<span class=\"token number\">5</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>fullPath\n<span class=\"token comment\">// 完成解析后的 URL，包含查询参数和 hash 的完整路径。</span>\n\n<span class=\"token number\">6</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>matched\n<span class=\"token comment\">// 数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</span>\n\n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>name 当前路径名字\n<span class=\"token number\">8</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>meta 路由元信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"路由传参的方式有几种？区别是什么\"><a href=\"#路由传参的方式有几种？区别是什么\" class=\"headerlink\" title=\"路由传参的方式有几种？区别是什么\"></a>路由传参的方式有几种？区别是什么</h1><hr>\n<p>一、在路由表配置<strong>动态路由 “：id（名字）</strong>” 设置<strong>props 为 true</strong> 在组件那边用<strong>props 接收</strong></p>\n<p>​ <strong>或者</strong> 使用<strong>this.$route.params.id</strong>取值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/login/:id/:name'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里用动态路由的方式</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Login\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>二、在路由表设置**命名路由 name:”abc” ,**params 传参 [ 不会显示在地址栏 ]</p>\n<p>三、使用 path 来配置路由，通过 query 来传递参数，参数会在 url 后边的?id=?中显示</p>\n<p><strong>query 和 params</strong>的区别总结：</p>\n<ol>\n<li>params 传参，必须使用命名路由的方式传参；</li>\n<li>params 传参，不会显示在地址栏上，会保存在内存中，刷新会丢失，可以配合本地存储进行使用;</li>\n<li>query 的参数会显示在地址栏上，刷新不会丢失；</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//使用对象的形式，参数为地址栏上的参数</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用对象的形式 ，参数为params 不会显示在地址栏</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'user'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  router-link 标签传参</span>\n<span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link <span class=\"token operator\">:</span>to<span class=\"token operator\">=</span><span class=\"token string\">\"&#123; name: 'login', query: &#123; name:'zs',age: '19' &#125;&#125;\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link <span class=\"token operator\">:</span>to<span class=\"token operator\">=</span><span class=\"token string\">\"&#123; path: '/login', parmas: &#123; name:'zs', age: '19' &#125;&#125;\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-的导航守卫有哪些\"><a href=\"#vue-的导航守卫有哪些\" class=\"headerlink\" title=\"vue 的导航守卫有哪些\"></a>vue 的导航守卫有哪些</h1><hr>\n<p><strong>全局前置守卫</strong> <strong>router.beforeEach</strong> 主要用来路由鉴权</p>\n<p>to:即将要进入的路由对象；</p>\n<p>from:当前路由正要离开的路由对象；</p>\n<p>next:一定要调用该方法来解析这个钩子，否则在导航跳转时没有任何效果。执行效果依赖 next 方法的调用参数；</p>\n<p>next()：进行管道的下一个钩子；</p>\n<p>next(false)：中断当前的导航；</p>\n<p>next(’/’) 或者 next({ path: ‘/’ })：跳转到一个不同的地址，在导航到一个界面时，如果不满足跳转条件，使用该方法跳转到另一个界面，代码示例如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// to: Route: 即将要进入的目标路由对象</span>\n  <span class=\"token comment\">// from: Route: 当前导航正要离开的路由</span>\n  <span class=\"token comment\">// next: Function: 一定要调用该方法来resolve这个钩子。执行效果依赖next方法的调用参数</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200911093646859.png#pic_center\" alt=\"img\"></p>\n<p><strong>全局后置守卫 —— router.afterEach()</strong></p>\n<p>可以使用 router.afterEach() 注册一个全局后置守卫，和其他守卫(包括组单个路由独享的守卫以及组件中的守卫)不同的是，全局后置守卫不会接受 next() 函数，也不会改变导航本身；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// to: Route: 即将要进入的目标路由对象</span>\n  <span class=\"token comment\">// from: Route: 当前导航正要离开的路由</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"路由独享的守卫-beforeEnter\"><a href=\"#路由独享的守卫-beforeEnter\" class=\"headerlink\" title=\"路由独享的守卫 beforeEnter\"></a>路由独享的守卫 beforeEnter</h5><p>与全局的 beforeEach 完全相同，如果都设置则在 beforeEach 之后紧随执行，参数 to、from、next</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/foo\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">beforeEnter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"组件内的守卫\"><a href=\"#组件内的守卫\" class=\"headerlink\" title=\"组件内的守卫\"></a>组件内的守卫</h3><p><strong>beforeRouteEnter</strong><br><strong>beforeRouteUpdate(2.2 新增)</strong><br><strong>beforeRouteLeave</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 在渲染该组件的对应路由被 confirm 前调用</span>\n   <span class=\"token comment\">// 不！能！获取组件实例 `this`</span>\n   <span class=\"token comment\">// 因为当守卫执行前，组件实例还没被创建</span>\n   <span class=\"token comment\">// next（）里面可以写成回调函数，提供vm（相当于this）参数 来访问组件的属性</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>vm<span class=\"token punctuation\">.</span>detailInfo <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">beforeRouteUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 在当前路由改变，但是该组件被复用时调用</span>\n   <span class=\"token comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\n   <span class=\"token comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\n   <span class=\"token comment\">// 可以访问组件实例 `this`</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 导航离开该组件的对应路由时调用</span>\n   <span class=\"token comment\">// 可以访问组件实例 `this`</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-路由模式，hash-模式-和-history-模式区别\"><a href=\"#vue-路由模式，hash-模式-和-history-模式区别\" class=\"headerlink\" title=\"vue 路由模式，hash 模式 和 history 模式区别\"></a>vue 路由模式，hash 模式 和 history 模式区别</h1><hr>\n<p>原理：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">hash —— 即地址栏 <span class=\"token constant\">URL</span> 中的 <span class=\"token comment\">// # 符号（此 hash 不是密码学里的散列运算）。比如这个 URL：http://www.abc.com/#/hello，hash 的值为 #/hello。</span>\n它的特点在于：hash 虽然出现在 <span class=\"token constant\">URL</span> 中，但不会被包括在 <span class=\"token constant\">HTTP</span> 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。\n\n<span class=\"token comment\">// history ——  利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。</span>\n（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 <span class=\"token constant\">URL</span>，但浏览器不会立即向后端发送请求。\n\n<span class=\"token comment\">// 因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>hash</th>\n<th align=\"left\">history</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url 显示</td>\n<td>有#，很 Low</td>\n<td align=\"left\">无#，好看</td>\n</tr>\n<tr>\n<td>回车刷新</td>\n<td>可以加载到 hash 值对应页面</td>\n<td align=\"left\">一般就是 404 掉了</td>\n</tr>\n<tr>\n<td>支持版本</td>\n<td>支持低版本浏览器和 IE 浏览器</td>\n<td align=\"left\">HTML5 新推出的 API</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/b'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 替换路由</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 路由压栈 替换当前地址 被替换地址进入访问历史</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前进</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后退2次</span>\n\n<span class=\"token literal-property property\">hash模式优缺点</span><span class=\"token operator\">:</span>\n优点\n只需要前端配置路由表<span class=\"token punctuation\">,</span> 不需要后端的参与\n兼容性好<span class=\"token punctuation\">,</span> 浏览器都能支持\nhash值改变不会向后端发送请求<span class=\"token punctuation\">,</span> 完全属于前端路由\n缺点\nhash值前面需要加#<span class=\"token punctuation\">,</span> 不符合url规范<span class=\"token punctuation\">,</span>也不美观\n\nhistory 模式的优缺点：\n优点：\n符合url地址规范<span class=\"token punctuation\">,</span> 不需要#<span class=\"token punctuation\">,</span> 使用起来比较美观\n缺点：\n兼容性不如 hash，且需要服务端支持重定向，否则一刷新页面就<span class=\"token number\">404</span>了\n兼容性比较差<span class=\"token punctuation\">,</span> 利用了 <span class=\"token constant\">HTML5</span> History对象中新增的 <span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和 <span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法<span class=\"token punctuation\">,</span>需要特定浏览器的支持<span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-的路由懒加载是什么\"><a href=\"#vue-的路由懒加载是什么\" class=\"headerlink\" title=\"vue 的路由懒加载是什么\"></a>vue 的路由懒加载是什么</h1><hr>\n<p>文件中包含了所有的用户组件的 js 以及 css 代码，但用户可能根本不会浏览器到某些页面，也就是说根本不需要渲染某些组件，所以 vue-router 提供了一种路由懒加载机制，就是当某个路由规则匹配时，才会去加载下载并加载某个组件，此时可以提升首页的渲染速度.</p>\n<p>路由懒加载实现的基础是组件引入方式的变化，需要使用 如下方式引入组件才可以</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../page/home/HomeView.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-中怎么动态劫持属性\"><a href=\"#vue-中怎么动态劫持属性\" class=\"headerlink\" title=\"vue 中怎么动态劫持属性\"></a>vue 中怎么动态劫持属性</h1><hr>\n<p><strong>在 vue2.0 中使用 Object.defineProperty( ) 来实现 vue 数据劫持这一行为.</strong></p>\n<p><strong>数据劫持</strong>:指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新值\"</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 多个属性 遍历数组</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newV <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        value <span class=\"token operator\">=</span> newV<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>修改对象总结：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 可以监测到属性的获取、修改，但是新增、删除监测不到<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>修改数组总结：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//若执行的方法修改了原数组， Object.defineProperty() 监测不到数组的变化，但是若该方法不</span>\n修改原数组<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回一个新数组的时候， Object.defineProperty()就可以检测到数组的变化。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Proxy：\"><a href=\"#Proxy：\" class=\"headerlink\" title=\"Proxy：\"></a>Proxy：</h3><p>在 Vue3.0 中将会通过 <strong>Proxy</strong> 来替换原本的 Object.defineProperty() 来实现数据响应式。Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。可以说 Proxy 是 defineProperty 的升级版。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> newVm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> newV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newV<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>总结：</strong></p>\n<p><strong>proxy 不需要对数组、对象进行比遍历，性能上比较好，而且可以完美的监听到任何方式的数据改变，唯一的缺陷就是浏览器的兼容性不好。</strong></p>\n<hr>\n<h1 id=\"Vue2-的数据响应式缺陷\"><a href=\"#Vue2-的数据响应式缺陷\" class=\"headerlink\" title=\"Vue2 的数据响应式缺陷\"></a>Vue2 的数据响应式缺陷</h1><hr>\n<h3 id=\"修改对象：\"><a href=\"#修改对象：\" class=\"headerlink\" title=\"修改对象：\"></a>修改对象：</h3><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。</p>\n<p>可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>要修改的对象<span class=\"token punctuation\">,</span> 要修改的值<span class=\"token punctuation\">,</span> 修改值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改数组：【</p>\n<p>1、vue 对于数组项是简单数据类型的情况没有劫持,这也导致了 vue 数组使用的一个问题，当数组项是简单数据类型时，修改数据项时视图并不会更新。</p>\n<p>2、通过索引修改简单数据类型没有响应式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Vue.set(要修改的数组, 要修改的值, 修改值)\nthis.$set((this.数组, 要修改的值, 修改值)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220822171913416.png\" alt=\"image-20220822171913416\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">因为es5的object.defineProperty无法监听对象属性的删除和添加\n不能监听数组的变化，除了push&#x2F;pop&#x2F;shift&#x2F;unshift&#x2F;splice&#x2F;spObject.definert&#x2F;reverse，其他都不行\nObject.defineProperty只能遍历对象属性直接修改(需要深拷贝进行修改)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue2-的双向数据绑定的原理是什么\"><a href=\"#vue2-的双向数据绑定的原理是什么\" class=\"headerlink\" title=\"vue2 的双向数据绑定的原理是什么\"></a>vue2 的双向数据绑定的原理是什么</h1><hr>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"vue3-0-怎么实现的双向数据绑定\"><a href=\"#vue3-0-怎么实现的双向数据绑定\" class=\"headerlink\" title=\"vue3.0 怎么实现的双向数据绑定\"></a>vue3.0 怎么实现的双向数据绑定</h2><h2 id=\"何为双向数据流，单向数据流呢？\"><a href=\"#何为双向数据流，单向数据流呢？\" class=\"headerlink\" title=\"何为双向数据流，单向数据流呢？\"></a>何为双向数据流，单向数据流呢？</h2><p>单向数据流</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使 UI 发生变更就必须创建各种 action 来维护对应的 state<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>双向数据绑定</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 debug 的难度。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"proxy-和-object-definepropoty-的区别\"><a href=\"#proxy-和-object-definepropoty-的区别\" class=\"headerlink\" title=\"proxy 和 object.definepropoty 的区别\"></a>proxy 和 object.definepropoty 的区别</h2><p>（1）Object.defineProperty 监听的是对象的每个属性，而 Proxy 监听的是对象本身。</p>\n<p>（2）使用 Object.defineProperty 需要遍历对象的每个属性，而 Proxy 则直接代理对象，不需要遍历操作。</p>\n<p>（3）Proxy 对新增属性也可以监听，Object.defineProperty 不可。</p>\n<p>（4）Proxy 可以监听到数组的变化。</p>\n<h2 id=\"proxy-为什么可以劫持到动态绑定的属性\"><a href=\"#proxy-为什么可以劫持到动态绑定的属性\" class=\"headerlink\" title=\"proxy 为什么可以劫持到动态绑定的属性\"></a>proxy 为什么可以劫持到动态绑定的属性</h2><hr>\n<h1 id=\"mixin-混入的使用情况\"><a href=\"#mixin-混入的使用情况\" class=\"headerlink\" title=\"mixin 混入的使用情况\"></a>mixin 混入的使用情况</h1><hr>\n<p><strong>什么是 Mixin 混入</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>场景运用：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性。他们可能会公用一部分业务逻辑，但是他们的页面结构又不相同。这个时候就可以使用mixin来让代码复用。（类似于JS库，暴露出来的方法达到函数复用的效果。又区别于JS库，它继承了vue中script所有对象，包括生命周期，data，methods）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"vue-项目的性能优化\"><a href=\"#vue-项目的性能优化\" class=\"headerlink\" title=\"vue 项目的性能优化\"></a>vue 项目的性能优化</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span>、v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 和 v<span class=\"token operator\">-</span>show 区分使用场景\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>computed 和 watch 区分使用场景\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span> 遍历必须为 item 添加 key，且避免同时使用 v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>\n<span class=\"token number\">4.</span>事件及销毁\n<span class=\"token number\">5.</span>长列表以及不需要数据劫持的场景<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vuex-的使用流程\"><a href=\"#vuex-的使用流程\" class=\"headerlink\" title=\"vuex 的使用流程\"></a>vuex 的使用流程</h1><hr>\n<h3 id=\"vuex-官方解释：\"><a href=\"#vuex-官方解释：\" class=\"headerlink\" title=\"vuex 官方解释：\"></a>vuex 官方解释：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>什么时候使用它？</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。\n\n如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>一、创建 store 仓库</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ts声明接口</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CountState</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 最好用模块，好管理</span>\n  <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">namespaced</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启命名空间</span>\n      <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> payload <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//todo &#123; commit &#125;是store解构出来   &#123;payload&#125; 时传过来的参数，需要结构</span>\n          <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"addcount\"</span><span class=\"token punctuation\">,</span>\n            payload<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">addcount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//todo  &#123;type: 'count/add', payload: '23'&#125;</span>\n          state<span class=\"token punctuation\">.</span>n <span class=\"token operator\">+=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// state.n++</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>main.js 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Antd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>组件内使用：</p>\n<p>vue2.o 用法：辅助函数： mapState 获取值 mapMutations 获取同步方法 mapActions 调用异步方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span>\n\n<span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function-variable function\">n</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"addcount\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// ...展开预算符</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vue3.o 用法 使用 useStore hooks</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//todo computed 获取仓库值  不要忘记加上仓库名</span>\n    <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//todo 调用 store的 mutations 方法  store.commit(&#123;type:'仓库名/方法名'&#125;)</span>\n     <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addcount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"count/addcount\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//todo 调用 store的 mutations 方法  store.dispath(&#123; type:'仓库名/方法名',payload:要传的参数 &#125;)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"count/add\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> num<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>数据渲染: 在挂载结束阶段调用仓库的 Actions 异步方法请求数据 - 在 commit mutations 改变数据</p>\n<hr>\n<h1 id=\"组件化和模块化的区别\"><a href=\"#组件化和模块化的区别\" class=\"headerlink\" title=\"组件化和模块化的区别\"></a>组件化和模块化的区别</h1><hr>\n<p>模块化：给同一个功能业务的代码起一个模块名,然后负责对应的部分</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">模块化是从代码逻辑角度划分，把一些可复用的代码，抽离为单个模块，以便于项目的维护和开发保证职能化的单一。 比如登录模块，他的功能就是登录，注册功能又是一个模块<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>组件化：将可以复用的代码封成组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">组件化是从UI界面角度划分的，从页面上每看到一个独立的区域，都可以看作一个组件。前端组件化开发是便于组件的复用，把一些可复用的UI元素，抽离出来不断复用便于减少代码的书写<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"https://img-blog.csdnimg.cn/20201109161212372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1OTUzOTM3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"img\" style=\"zoom:50%;\" />\n\n<h1 id=\"webpack-的作用是什么\"><a href=\"#webpack-的作用是什么\" class=\"headerlink\" title=\"webpack 的作用是什么\"></a>webpack 的作用是什么</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack是一种前端资源构建工具，一个静态模块打包器</span>\n<span class=\"token comment\">// 由于浏览器解析不了es6及以上的语法，无法编译less/sacc等，所以我们需要各种插件去es6编译es5、将less编译成css，比较杂乱，所以就有了webpack将这些插件组合在一起</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"webpack-的打包流程是什么\"><a href=\"#webpack-的打包流程是什么\" class=\"headerlink\" title=\"webpack 的打包流程是什么\"></a>webpack 的打包流程是什么</h1><p>1.初始化一个管理包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">yarn init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2 、安装使用 webpack 所需要的依赖包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">yarn add webpack webpack<span class=\"token operator\">-</span>cli <span class=\"token operator\">-</span><span class=\"token constant\">D</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、 在 package.json 文件中配置 scripts(自定义命令)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">scripts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>4、将新建的打包文件引入 webpack 的默认打包入口 src/index.js 中</p>\n<p>5、在根目录下执行 yarn build 命令打包</p>\n<hr>\n<h1 id=\"axios-是怎么封装的\"><a href=\"#axios-是怎么封装的\" class=\"headerlink\" title=\"axios 是怎么封装的\"></a>axios 是怎么封装的</h1><hr>\n<p><strong>封装的好处</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. 统一数据请求的处理</span>\n<span class=\"token comment\">// 2. 考虑底层库将来可能会切换</span>\n<span class=\"token comment\">// 3. 数据请求可能设计到一些业务逻辑</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>整体思维：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. timeout  + baseURL\n2. 拦截器\n3. request函数的封装\n    1. 对参数的类型，对返回值的类型做约定\n    2. 通过method不同，做对应的switch操作<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建 index 文件 【cookie 封装】用到了 cookie：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> oDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oDate<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>oDate<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\";expires=\"</span> <span class=\"token operator\">+</span> oDate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//console.log(arr[i]);</span>\n    <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">People</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> getCookie<span class=\"token punctuation\">,</span> setCookie<span class=\"token punctuation\">,</span> removeCookie<span class=\"token punctuation\">,</span> People <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建请求 request 文件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> AxiosInstance<span class=\"token punctuation\">,</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> qs <span class=\"token keyword\">from</span> <span class=\"token string\">'qs'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主要用于post请求，把请求参数转从 json换成 form date数据</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> cookie <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//todo 创建自定义请求实例</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">ins</span><span class=\"token operator\">:</span> AxiosInstance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://59.110.226.77:5000/api/private/v1/'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//todo 拦截器 发送请求时做操作</span>\nins<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">AxiosRequestConfig</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//todo 携带token</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span>\n    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> token<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求头配置token.方便后端验证</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//todo 拦截器  接收到请求时做操作</span>\nins<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> AxiosResponse<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AxiosResponse<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    method<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    postType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    url<span class=\"token punctuation\">,</span>\n    method <span class=\"token operator\">=</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//请求方法</span>\n    data<span class=\"token punctuation\">,</span>\n    postType <span class=\"token operator\">=</span> <span class=\"token string\">'form'</span>  <span class=\"token comment\">// formData请求方式</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> IConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">>></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 根据请求的类型来进行划分</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'post'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 一般作于增加</span>\n             <span class=\"token comment\">// formData请求方式</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postType <span class=\"token operator\">===</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> FormData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//文件</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 将data的所有参数全部给了p</span>\n                    p<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n             <span class=\"token comment\">// 普通post请求方式</span>\n            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'put'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 一般作于修改</span>\n            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'delete'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 删除</span>\n            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'patch'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 更新数据</span>\n            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token comment\">// get 查询</span>\n            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">get</span>：获取数据\npost：提交数据（表单提交<span class=\"token operator\">+</span>文件上传）\nput：更新数据（所有数据推送到后端）\npatch：更新数据（只将更改的数据推送到后端）\n<span class=\"token keyword\">delete</span>：删除数据\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> request<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"vue-怎么做反向代理跨域-vue-config-js-配置跨域\"><a href=\"#vue-怎么做反向代理跨域-vue-config-js-配置跨域\" class=\"headerlink\" title=\"vue 怎么做反向代理跨域 vue.config.js 配置跨域\"></a>vue 怎么做反向代理跨域 vue.config.js 配置跨域</h1><hr>\n<p><strong>主要流程：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">前端跨域 <span class=\"token operator\">--</span><span class=\"token operator\">-</span> 反向代理 <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span>\n   <span class=\"token number\">1.</span> 首先反向代理要写在  vue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>js  文件中  <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n   <span class=\"token number\">2.</span> 报什么错就是跨域问题  <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span>\n   <span class=\"token number\">3.</span> 易犯错地方 <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n     <span class=\"token number\">3.1</span> 代理标识 会起 <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n     <span class=\"token number\">3.2</span> 改了配置文件要重启项目  <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n     <span class=\"token number\">3.3</span> 请求的url要去掉域名和协议 <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"send\"</span><span class=\"token operator\">></span> 发送数据请求 <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>创建 vue.config.js 文件： 【项目配置文件改了，必须重启项目】</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> 项目配置文件改了，必须重启项目\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">lintOnSave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//todo proxy就是反省代理配置</span>\n    <span class=\"token comment\">// https://m.maoyan.com/ajax/movieOnInfoList?token=&amp;optimus_uuid=70CFC3A08B7911EB8E337BEC41DC7263F6E47DC364A54B0891A2A3D261F1FCD0&amp;optimus_risk_level=71&amp;optimus_code=10</span>\n    <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 代理路径【域名后的第一个路径】: 代理配置</span>\n      <span class=\"token string-property property\">'/ajax'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 目标源</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://m.maoyan.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//使用我们当前的服务器源来代替目标源</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"如何在相应拦截器中处理-token\"><a href=\"#如何在相应拦截器中处理-token\" class=\"headerlink\" title=\"如何在相应拦截器中处理 token\"></a>如何在相应拦截器中处理 token</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//todo 拦截器 发送请求时做操作</span>\nins<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">AxiosRequestConfig</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//todo 携带token</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取token</span>\n    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> token<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求头配置token.方便后端验证</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//todo 拦截器  接收到请求时做操作</span>\nins<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> AxiosResponse<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AxiosResponse<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"项目：\"><a href=\"#项目：\" class=\"headerlink\" title=\"项目：\"></a>项目：</h2><h3 id=\"图片地址变成变量注意点-：require\"><a href=\"#图片地址变成变量注意点-：require\" class=\"headerlink\" title=\"图片地址变成变量注意点;：require\"></a><strong>图片地址变成变量注意点;：require</strong></h3><p>需要 import 引入 或者 require（图片路径）</p>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220822212304519.png\" alt=\"image-20220822212304519\"></p>\n<h3 id=\"amfe-flexible-可伸缩布局方案-postcss-pxtorem-进行移动端适配\"><a href=\"#amfe-flexible-可伸缩布局方案-postcss-pxtorem-进行移动端适配\" class=\"headerlink\" title=\"amfe-flexible(可伸缩布局方案) postcss-pxtorem 进行移动端适配\"></a>amfe-flexible(可伸缩布局方案) postcss-pxtorem 进行移动端适配</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1.</span>介绍amfe<span class=\"token operator\">-</span>flexible\n<span class=\"token comment\">// amfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。</span>\n<span class=\"token number\">2.</span>介绍postcss<span class=\"token operator\">-</span>pxtorem\n<span class=\"token comment\">// postcss-pxtorem是postcss的插件，用于将像素（px）单元生成rem单位。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>具体步骤：<br><strong>1. 安装两个插件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install amfe-flexible --save\nnpm install postcss-pxtorem --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>2. 在 main.js 导入 amfe-flexible</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#39;amfe-flexible&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>在安装 postcss-pxtorem 的时候会生成一个文件.postcssrc.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 按照设计稿750px 的 1/2</span>\n        <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n         <span class=\"token string\">\"postcss-pxtorem\"</span>：<span class=\"token punctuation\">&#123;</span>\n             <span class=\"token literal-property property\">rootValue</span><span class=\"token operator\">:</span> <span class=\"token number\">37.5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//根据设计稿宽度除以10进行设置，假设设计稿为375，即rootValue设为37.5</span>\n             <span class=\"token literal-property property\">propList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//设置需要转换的属性，*为所有都进行转换</span>\n              <span class=\"token comment\">// 该项仅在使用 Circle 组件时需要</span>\n            <span class=\"token comment\">// 原因参见 https://github.com/youzan/vant/issues/1948</span>\n            <span class=\"token literal-property property\">selectorBlackList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'van-circle__layer'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token number\">5</span>、在index<span class=\"token punctuation\">.</span>html头部加入手机端自适应meta\n<span class=\"token function\">在首页中</span><span class=\"token punctuation\">(</span>项目中<span class=\"token operator\">-</span><span class=\"token keyword\">public</span><span class=\"token operator\">-</span>index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">)</span>中添加以下meta标签\n<span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>5、在 index.html 头部加入手机端自适应 meta<br>在首页中(项目中-public-index.html)中添加以下 meta 标签</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220822211329549.png\" alt=\"image-20220822211329549\"></p>\n<h3 id=\"vue-lazyload-图片资源懒加载\"><a href=\"#vue-lazyload-图片资源懒加载\" class=\"headerlink\" title=\"vue-lazyload 图片资源懒加载\"></a>vue-lazyload 图片资源懒加载</h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p>\n<p>（1）安装插件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm install vue<span class=\"token operator\">-</span>lazyload <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（2）在入口文件 man.js 中引入并使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> VueLazyload <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-lazyload\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后再 vue 中直接使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueLazyload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者添加自定义选项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueLazyload<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">preLoad</span><span class=\"token operator\">:</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/error.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/loading.gif\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attempt</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>img v<span class=\"token operator\">-</span>lazy<span class=\"token operator\">=</span><span class=\"token string\">\"/static/img/1.png\"</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"第三方插件的按需引入\"><a href=\"#第三方插件的按需引入\" class=\"headerlink\" title=\"第三方插件的按需引入\"></a>第三方插件的按需引入</h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：</p>\n<p>（1）首先，安装 babel-plugin-component ：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install babel-plugin-component -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（2）然后，将 .babelrc 修改为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">\"modules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"component\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"element-ui\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"styleLibraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theme-chalk\"</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）在 main.js 中引入部分组件：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Vue</span> from <span class=\"token char\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Select</span> <span class=\"token punctuation\">&#125;</span> from 'element<span class=\"token operator\">-</span>ui'<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Select</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p><strong>二，Webpack 层面的优化</strong></p>\n<h3 id=\"2-1、Webpack-对图片进行压缩\"><a href=\"#2-1、Webpack-对图片进行压缩\" class=\"headerlink\" title=\"2.1、Webpack 对图片进行压缩\"></a>2.1、Webpack 对图片进行压缩</h3><p>在 vue 项目中除了可以在 webpack.base.conf.js 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 image-webpack-loader 来压缩图片：</p>\n<p>（1）首先，安装 image-webpack-loader ：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm install image<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>loader <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（2）然后，在 webpack.base.conf.js 中进行配置：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpe?g|gif|svg)(\\?.*)?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">assetsPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img/[name].[hash:7].[ext]'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'image-webpack-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">bypassOnDebug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用 element-ui 最新版 2.15.9 引入 form 表单 里面的 el-date-picker 【日期选择器】组件会报错：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Avoid mutating a prop directly since the value will be overwritten whenever the parent component re<span class=\"token operator\">-</span>renders<span class=\"token punctuation\">.</span>\nInstead<span class=\"token punctuation\">,</span> use a data or computed property based on the prop's value<span class=\"token punctuation\">.</span> Prop being mutated<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n从报错内容上来看，我们改动了子组件中引用的父组件的变量，也就是 props 中的数据，是不能这么操作的；\n因为Vue的单项数据流，子组件不能改动父组件props传过来的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">锁定组件，发现是 el<span class=\"token operator\">-</span>date<span class=\"token operator\">-</span>picker 组件抛出的警告。通过在 github 上搜索，最终找到了答案\n\n问题出在了这个 <span class=\"token constant\">PR</span> <span class=\"token number\">21806</span> 增加了 props placement 用来适应位置，但是之前的代码 created 时有给 placement 赋值。\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>placement <span class=\"token operator\">=</span> <span class=\"token constant\">PLACEMENT_MAP</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>align<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token constant\">PLACEMENT_MAP</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n\n说白了之前 placement 是 data 的对象，现在变成 props 了，然后修改就报错了\n\n降级\n先卸载最新版\n将最新版<span class=\"token number\">2.15</span><span class=\"token number\">.9</span> 降级到 <span class=\"token number\">2.15</span><span class=\"token number\">.8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>优化总结：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//代码包优化</span>\n\n屏蔽sourcemap，vue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>js里面设置productionSourceMap为<span class=\"token boolean\">false</span>\n\n对项目代码中的js<span class=\"token punctuation\">,</span>css<span class=\"token punctuation\">,</span>svg<span class=\"token punctuation\">,</span>ico文件进行gzip压缩，在vue<span class=\"token operator\">-</span>cli脚手架的配置信息中，有对代码进行压缩的配置项，例如index<span class=\"token punctuation\">.</span>js的通用配置，productionGzip设置为<span class=\"token boolean\">true</span>，但是首先需要对compress<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin支持\n\n对路由组件进行懒加载，在router<span class=\"token punctuation\">.</span>js里面对组件进行按需加载\n\n<span class=\"token comment\">//2.源码优化</span>\n\nv<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>和v<span class=\"token operator\">-</span>show的选择性调用。对频繁调用的，不需要权限的显示隐藏，可以选择v<span class=\"token operator\">-</span>show，减少系统开销。\n\n对item设置唯一的key值\n\n细分vuejs组件，尽可能组件化\n\n减少watch的数据，有些情况可用vuex取代\n\n内容类系统的图片资源按需加载\n\n<span class=\"token comment\">//3.用户体验优化</span>\n\n防抖节流实现（按钮点击，下拉刷新，下拉搜索，上拉加载，页面滚动等情况）\n\n骨架屏加载\n\n<span class=\"token comment\">//4.cdn资源调用</span>\n\n引入的js<span class=\"token punctuation\">,</span>css<span class=\"token punctuation\">,</span>image用cdn地址来实现<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"better-scroll-插件做滚动\"><a href=\"#better-scroll-插件做滚动\" class=\"headerlink\" title=\"better-scroll 插件做滚动\"></a>better-scroll 插件做滚动</h2><p>安装 better-scroll</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i &#39;better-scroll&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>页面引入：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">import BScroll from 'better-scroll';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> bs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BScroll</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">.</span>scroll<span class=\"token operator\">-</span>wrapper'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                pullUpLoad<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 触底</span>\n                threshold<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                scrollX<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                scrollY<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                click<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不阻止点击事件</span>\n               <span class=\"token comment\">//  bounce: true, //回弹动画</span>\n              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbs<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>'pullingUp'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n               console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"触底了\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 监听下拉是否到底，到底后就执行一次函数，可以获取新的数据</span>\n                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">moreListAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">finishMore</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  bs<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重新计算高度</span>\n bs<span class=\"token punctuation\">.</span><span class=\"token function\">finishPullUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//告诉bs已经结束下拉行为，可以重新下拉；</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>项目可说难点： 【 <strong>vue 组件中 click 事件失效</strong> 】</p>\n<p>解决：使用了 bette-<a href=\"https://so.csdn.net/so/search?q=scroll&spm=1001.2101.3001.7020\">scroll</a>插件做滚动。发现 better-scroll 的配置中没有设置 click：true，设置过之后 click 事件成功。</p>\n<hr>\n<h1 id=\"Vue-中组件的封装\"><a href=\"#Vue-中组件的封装\" class=\"headerlink\" title=\"Vue 中组件的封装\"></a>Vue 中组件的封装</h1><hr>\n<h3 id=\"注册和使用一个组件\"><a href=\"#注册和使用一个组件\" class=\"headerlink\" title=\"注册和使用一个组件\"></a>注册和使用一个组件</h3><p>在 componet 下创建一个 button.vue 的文件，放置 button 组件代码。创建一个组建的 button 组件，，并且指定 name 为 oneButton。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one-button\"</span><span class=\"token operator\">></span>按钮组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"oneButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//todo 设置名字方便注册</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n<span class=\"token punctuation\">.</span>one<span class=\"token operator\">-</span>button <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 40px<span class=\"token punctuation\">;</span>\n  background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">241</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建组件完成后，不能在项目中直接使用，需要到 main.js 中注册才可以使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 第一步：导入button组件</span>\n<span class=\"token keyword\">import</span> OneButton <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/button.vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 第二步：注册组件,设置(组件名，组件)</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>OneButton<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> OneButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注册完成后，组件就可以在项目中使用了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>one<span class=\"token operator\">-</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>one<span class=\"token operator\">-</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"封装一个-element-ui-风格的按钮\"><a href=\"#封装一个-element-ui-风格的按钮\" class=\"headerlink\" title=\"封装一个 element-ui 风格的按钮\"></a>封装一个 element-ui 风格的按钮</h3><p>需要使用到的知识：</p>\n<ol>\n<li><strong>组件通讯</strong></li>\n<li><strong>组件插槽</strong></li>\n<li><strong>props 校验</strong></li>\n</ol>\n<p>参数支持：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>参数描述</th>\n<th>参数类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>按钮类型（primary/success/warning/danger/info）</td>\n<td>string</td>\n<td>default</td>\n</tr>\n<tr>\n<td>plain</td>\n<td>是否是朴素按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>round</td>\n<td>是否是圆角按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>circle</td>\n<td>是否是圆形按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>图标类名</td>\n<td>string</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>事件支持：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>事件描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>click</td>\n<td>点击事件</td>\n</tr>\n</tbody></table>\n<p>使用<a href=\"https://so.csdn.net/so/search?q=%E6%8F%92%E6%A7%BD&spm=1001.2101.3001.7020\">插槽</a>：</p>\n<p>为何？ 凡是希望组件中内容可以灵活设置的地方，都需要用到 slot 插槽来自定义内容</p>\n<p>按钮组件：</p>\n<pre class=\"line-numbers language-php+HTML\" data-language=\"php+HTML\"><code class=\"language-php+HTML\">&lt;template&gt;\n  &lt;button class&#x3D;&quot;one-button&quot;&gt;\n   &lt;span&gt;&lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;span&gt; &#x2F;&#x2F;父组件可以随便定义内容了\n  &lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在使用时就可以直接输入文本，定义按钮文本内容了：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span><span class=\"token punctuation\">></span></span>取消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置-button-组件的-type-属性-【让按钮支持-type-属性，使得按钮支持不同样式：】\"><a href=\"#设置-button-组件的-type-属性-【让按钮支持-type-属性，使得按钮支持不同样式：】\" class=\"headerlink\" title=\"设置 button 组件的 type 属性 【让按钮支持 type 属性，使得按钮支持不同样式：】\"></a>设置 button 组件的 type 属性 【让按钮支持 type 属性，使得按钮支持不同样式：】</h4><p>第一步:父组件组件传递 type 属性</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>primary按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>success按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>info按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>danger按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>warning按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二步：子组件接收负组件传递的数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'oneButton'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 此时对props进行校验，值接收string类型的type值</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String，\n      <span class=\"token comment\">// 设置默认值：如果不传值，那么使用default</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">created</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token comment\">//defalut primary success info danger warning</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"button-组件的-plain-属性-【添加多类名】\"><a href=\"#button-组件的-plain-属性-【添加多类名】\" class=\"headerlink\" title=\"button 组件的 plain 属性 【添加多类名】\"></a>button 组件的 plain 属性 【添加多类名】</h3><p>第三步:通过绑定类名的方法动态控制样式，由于 plain 类型是布尔值，所以在类型中我们使用对象的形式来控制样式</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one-button<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[`one-button-$&#123;type&#125;`,&#123;\n    'is-plain':plain\n  &#125;]<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第四步：设置不同类型的样式，由于 plain 类型是以对象的形式在类中定义的，所以使用获取属性的方法定义样式</p>\n<pre class=\"line-numbers language-stylus\" data-language=\"stylus\"><code class=\"language-stylus\">\n<span class=\"token selector\"><span class=\"token comment\">// 朴素按钮样式</span>\n.one-button.is-plain<span class=\"token punctuation\">&#123;</span></span>\n  <span class=\"token selector\">&amp;:hover<span class=\"token punctuation\">,</span>\n  &amp;:focus<span class=\"token punctuation\">&#123;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#489eff</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#409eff</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.one-button-primary.is-plain<span class=\"token punctuation\">&#123;</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#409eff</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#ecf5ff</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token selector\">&amp;:hover<span class=\"token punctuation\">,</span>\n  &amp;:focus<span class=\"token punctuation\">&#123;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#409eff</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#409eff</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.one-button-success.is-plain<span class=\"token punctuation\">&#123;</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#67c23a</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token property-declaration\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#c2e7b0</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token selector\">&amp;:hover<span class=\"token punctuation\">,</span>\n  &amp;:focus<span class=\"token punctuation\">&#123;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#67c23a</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#67c23a</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token property-declaration\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"button-组件的-round-属性-button-组件的-circle-属性\"><a href=\"#button-组件的-round-属性-button-组件的-circle-属性\" class=\"headerlink\" title=\"button 组件的 round 属性 button 组件的 circle 属性\"></a>button 组件的 round 属性 button 组件的 circle 属性</h3><p>设置 round 属性和之前的相似，只要在组件中定义好了样式，动态获取属性值即可。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">circle: &#123; type: Boolean, default: false &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"button-组件中使用字体图标\"><a href=\"#button-组件中使用字体图标\" class=\"headerlink\" title=\"button 组件中使用字体图标\"></a>button 组件中使用字体图标</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">首先需要有字体图标，我们可以去阿里巴巴矢量图标库下载。\n\n在asset目录下新建一个fonts目录，存放我们下载到的字体图标\n\n在main.js中引入字体图标\nimport &#39;.&#x2F;assets&#x2F;fonts&#x2F;iconfont.css&#39;\n\n将下载的字体图标css文件中的类名做修改，我将icon全部改为了one-icon，并且将初始的iconfont类改为了[class*&#x3D;&#39;one-icon&#39;]，当类名中有one-icon时使用，如下\n\n[class*&#x3D;&#39;one-icon&#39;] &#123;\n  font-family: &quot;iconfont&quot; !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n&#125;\n.one-icon-bluetoothoff:before &#123;\n  content: &quot;\\e697&quot;;\n&#125;\n\n父组件传递图标名，子组件接收并且放到图标中\n父组件传值：\n      &lt;one-button icon&#x3D;&quot;bluetoothon&quot;&gt;&lt;&#x2F;one-button&gt;\n      &lt;one-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;camera&quot;&gt;照相机&lt;&#x2F;one-button&gt;\n      &lt;one-button type&#x3D;&quot;success&quot; icon&#x3D;&quot;course&quot;&gt;&lt;&#x2F;one-button&gt;\n      &lt;one-button type&#x3D;&quot;info&quot; icon&#x3D;&quot;bluetooth_link&quot;&gt;&lt;&#x2F;one-button&gt;\n子组件接收：\n icon: &#123;\n      type: String,\n      default: &#39;&#39;\n    &#125;\n使用接收到的字体图标。在没有传入icon时隐藏&lt;i&gt;标签，在slot插槽没有传入值时，不显示&lt;span&gt;标签\n &lt;button class&#x3D;&quot;one-button&quot; :class&#x3D;&quot;[&#96;one-button-$&#123;type&#125;&#96;,&#123;\n    &#39;is-plain&#39;:plain,\n    &#39;is-round&#39;:round,\n    &#39;is-circle&#39;:circle,\n  &#125;]&quot;&gt;\n  &lt;i v-if&#x3D;&quot;icon&quot; :class&#x3D;&quot;&#96;one-icon-$&#123;icon&#125;&#96;&quot;&gt;&lt;&#x2F;i&gt;\n  &lt;!-- 如果没传入文本插槽，则不显示span内容 --&gt;\n   &lt;span v-if&#x3D;&quot;$slots.default&quot;&gt;&lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;span&gt;\n  &lt;&#x2F;button&gt;\n\n  设置icon配套样式，使图标和文字之间有一定间隔\n  .one-button [class*&#x3D;one-icon-]+span&#123;\n  margin-left: 5px;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"button-组件中的点击事件\"><a href=\"#button-组件中的点击事件\" class=\"headerlink\" title=\"button 组件中的点击事件\"></a>button 组件中的点击事件</h3><p>我们在使用组件时，直接给组件定义事件是不会被触发的。我们需要在组件中定义一个点击事件，这个点击事件不进行其他操作，只出发父组件中的点击事件。</p>\n<p>组件中的定义点击事件：</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;template&gt;\n  &lt;button class&#x3D;&quot;one-button&quot; :class&#x3D;&quot;[&#96;one-button-$&#123;type&#125;&#96;,&#123;\n    &#39;is-plain&#39;:plain,\n    &#39;is-round&#39;:round,\n    &#39;is-circle&#39;:circle,\n  &#125;]&quot;\n  @click&#x3D;&quot;handleClick&quot;\n  &gt;\n  &lt;i v-if&#x3D;&quot;icon&quot; :class&#x3D;&quot;&#96;one-icon-$&#123;icon&#125;&#96;&quot;&gt;&lt;&#x2F;i&gt;\n  &lt;!-- 如果没传入文本插槽，则不显示span内容 --&gt;\n   &lt;span v-if&#x3D;&quot;$slots.default&quot;&gt;&lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;span&gt;\n  &lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>定义一个点击事件，这个点击事件的作用是调用父组件中的点击事件，并且回调</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleClick</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>父组件在使用时定义自己的点击事件，其本质是子组件中的点击事件触发父组件中的点击事件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"row\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>one<span class=\"token operator\">-</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"getInfo\"</span><span class=\"token operator\">></span>按钮<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>one<span class=\"token operator\">-</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getInfo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取信息！！'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//获取信息！！</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"button-组件中的-disabled-属性\"><a href=\"#button-组件中的-disabled-属性\" class=\"headerlink\" title=\"button 组件中的 disabled 属性\"></a>button 组件中的 disabled 属性</h3><p>和之前相似，只要父子组件传值并且动态获取这个值并且赋给 disabled 属性,并且设置一个 disabled 样式即可。</p>\n<p>父组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getInfo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>子组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one-button<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[`one-button-$&#123;type&#125;`,&#123;\n    'is-plain':plain,\n    'is-round':round,\n    'is-circle':circle,\n    'is-disabled':disabled\n  &#125;]<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">:disabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disabled<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`one-icon-$&#123;icon&#125;`<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$slots.default<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n// props disabled: &#123; type: Boolean, default: false &#125; // css\n.one-button.is-disabled&#123; cursor: no-drop; &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"axios拦截器\"><a href=\"#axios拦截器\" class=\"headerlink\" title=\"axios拦截器\"></a><a href=\"https://so.csdn.net/so/search?q=axios&spm=1001.2101.3001.7020\">axios</a>拦截器</h2><p>请求拦截器、响应拦截器</p>\n<ol>\n<li>请求拦截器 在请求发送前进行必要操作处理，例如添加统一 cookie、请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；</li>\n<li>响应拦截器 同理，响应拦截器也是如此功能，只是在请求得到响应之后，对响应体的一些处理，通常是数据统一处理等，也常来判断登录失效等。</li>\n</ol>\n","text":"MVVM 的理解 MVVM` 表示的是 `Model-View-ViewModel 1：MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。 2：其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[{"name":"vue2","slug":"vue2","count":1,"path":"api/tags/vue2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MVVM-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">MVVM 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">vue 的优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vue2-%E4%BC%98%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">vue2 优点：</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#v-for-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0-key\"><span class=\"toc-text\">v-for 为什么要加 key</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#v-if-%E5%92%8C-v-show-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">v-if 和 v-show 的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E5%B8%B8%E7%94%A8%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%88%E4%BA%8B%E4%BB%B6%E3%80%81%E6%8C%89%E9%94%AE%E3%80%81v-model%EF%BC%89\"><span class=\"toc-text\">vue 常用修饰符（事件、按键、v-model）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#keep-alive-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">keep-alive 的作用是什么？原理是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F-DOM-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">虚拟 DOM 的理解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E4%B8%AD%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">vue 中组件的传值方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84-data-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%AA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">vue 组件中的 data 为什么是个函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#computed-%E5%92%8C-watch-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">computed 和 watch 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#immediate-%E7%9B%91%E5%90%AC%E7%9A%84%E6%97%B6%E5%80%99%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96-dom-%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">immediate 监听的时候是否可以获取 dom 元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Watch-%E5%92%8C-computed-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Watch 和 computed 的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nextTick-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">$nextTick 的使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E4%B8%AD-bus-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BC%8A%E7%AB%AF-%E3%80%90%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E3%80%91\"><span class=\"toc-text\">vue 中 bus 的使用弊端 【事件总线】</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3%E5%92%8C%E5%90%84%E4%B8%AA%E9%92%A9%E5%AD%90%E7%9A%84%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">vue 的生命周期的理解和各个钩子的实际使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#updated\"><span class=\"toc-text\">updated:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">相关面试题：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E5%93%AA%E9%87%8C%E6%8B%BF%E5%88%B0%E4%BA%86%E8%99%9A%E6%8B%9F-DOM-%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">初始化阶段，我们哪里拿到了虚拟 DOM 呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E5%93%AA%E9%87%8C%E6%8B%BF%E5%88%B0%E4%BA%86%E7%9C%9F%E5%AE%9E-DOM-%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">初始化阶段，我们哪里拿到了真实 DOM 呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%BB%84%E4%BB%B6%EF%BC%8C%E6%98%AF%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%EF%BC%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5%E7%9C%9F%E5%AE%9E-DOM-%E5%93%AA%E9%87%8C%E5%8F%AF%E4%BB%A5%E6%8B%BF%E5%88%B0%EF%BC%9F\"><span class=\"toc-text\">更新阶段真实 DOM 哪里可以拿到？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5%E8%A7%A6%E5%8F%91%E4%BA%86%EF%BC%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E4%BC%9A%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">父组件更新阶段触发了，子组件是否会重新渲染</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5%E8%A7%A6%E5%8F%91%E4%BA%86%EF%BC%8C%E7%88%B6%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E4%BC%9A%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">子组件更新阶段触发了，父组件是否会重新渲染</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E4%B8%AD%E4%BB%8E-created-%E5%92%8C-mouthed-%E4%B8%AD%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">vue 中从 created 和 mouthed 中发送请求的区别是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#router-%E5%92%8C-route-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">$router 和 $route 区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%87%A0%E7%A7%8D%EF%BC%9F%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">路由传参的方式有几种？区别是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E7%9A%84%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">vue 的导航守卫有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB-beforeEnter\"><span class=\"toc-text\">路由独享的守卫 beforeEnter</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">组件内的守卫</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%EF%BC%8Chash-%E6%A8%A1%E5%BC%8F-%E5%92%8C-history-%E6%A8%A1%E5%BC%8F%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">vue 路由模式，hash 模式 和 history 模式区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E7%9A%84%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">vue 的路由懒加载是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%8A%A8%E6%80%81%E5%8A%AB%E6%8C%81%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">vue 中怎么动态劫持属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Proxy%EF%BC%9A\"><span class=\"toc-text\">Proxy：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue2-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">Vue2 的数据响应式缺陷</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%EF%BC%9A\"><span class=\"toc-text\">修改对象：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue2-%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">vue2 的双向数据绑定的原理是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vue3-0-%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">vue3.0 怎么实现的双向数据绑定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%95%E4%B8%BA%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%EF%BC%8C%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">何为双向数据流，单向数据流呢？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#proxy-%E5%92%8C-object-definepropoty-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">proxy 和 object.definepropoty 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#proxy-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%8A%AB%E6%8C%81%E5%88%B0%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">proxy 为什么可以劫持到动态绑定的属性</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mixin-%E6%B7%B7%E5%85%A5%E7%9A%84%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">mixin 混入的使用情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vue-%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">vue 项目的性能优化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vuex-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">vuex 的使用流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vuex-%E5%AE%98%E6%96%B9%E8%A7%A3%E9%87%8A%EF%BC%9A\"><span class=\"toc-text\">vuex 官方解释：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">组件化和模块化的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#webpack-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">webpack 的作用是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#webpack-%E7%9A%84%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">webpack 的打包流程是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#axios-%E6%98%AF%E6%80%8E%E4%B9%88%E5%B0%81%E8%A3%85%E7%9A%84\"><span class=\"toc-text\">axios 是怎么封装的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-%E6%80%8E%E4%B9%88%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F-vue-config-js-%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">vue 怎么做反向代理跨域 vue.config.js 配置跨域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E7%9B%B8%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%AD%E5%A4%84%E7%90%86-token\"><span class=\"toc-text\">如何在相应拦截器中处理 token</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%EF%BC%9A\"><span class=\"toc-text\">项目：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80%E5%8F%98%E6%88%90%E5%8F%98%E9%87%8F%E6%B3%A8%E6%84%8F%E7%82%B9-%EF%BC%9Arequire\"><span class=\"toc-text\">图片地址变成变量注意点;：require</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#amfe-flexible-%E5%8F%AF%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88-postcss-pxtorem-%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D\"><span class=\"toc-text\">amfe-flexible(可伸缩布局方案) postcss-pxtorem 进行移动端适配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue-lazyload-%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">vue-lazyload 图片资源懒加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">第三方插件的按需引入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E3%80%81Webpack-%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">2.1、Webpack 对图片进行压缩</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#better-scroll-%E6%8F%92%E4%BB%B6%E5%81%9A%E6%BB%9A%E5%8A%A8\"><span class=\"toc-text\">better-scroll 插件做滚动</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue-%E4%B8%AD%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">Vue 中组件的封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">注册和使用一个组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA-element-ui-%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%8C%89%E9%92%AE\"><span class=\"toc-text\">封装一个 element-ui 风格的按钮</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE-button-%E7%BB%84%E4%BB%B6%E7%9A%84-type-%E5%B1%9E%E6%80%A7-%E3%80%90%E8%AE%A9%E6%8C%89%E9%92%AE%E6%94%AF%E6%8C%81-type-%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%BD%BF%E5%BE%97%E6%8C%89%E9%92%AE%E6%94%AF%E6%8C%81%E4%B8%8D%E5%90%8C%E6%A0%B7%E5%BC%8F%EF%BC%9A%E3%80%91\"><span class=\"toc-text\">设置 button 组件的 type 属性 【让按钮支持 type 属性，使得按钮支持不同样式：】</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#button-%E7%BB%84%E4%BB%B6%E7%9A%84-plain-%E5%B1%9E%E6%80%A7-%E3%80%90%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%B1%BB%E5%90%8D%E3%80%91\"><span class=\"toc-text\">button 组件的 plain 属性 【添加多类名】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#button-%E7%BB%84%E4%BB%B6%E7%9A%84-round-%E5%B1%9E%E6%80%A7-button-%E7%BB%84%E4%BB%B6%E7%9A%84-circle-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">button 组件的 round 属性 button 组件的 circle 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#button-%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87\"><span class=\"toc-text\">button 组件中使用字体图标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#button-%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">button 组件中的点击事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#button-%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84-disabled-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">button 组件中的 disabled 属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#axios%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">axios拦截器</span></a></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"用Promise实现简单的红绿灯效果","uid":"bff22f3fd584462e1917ba54fb01e458","slug":"用Promise实现一个简单的红绿灯效果","date":"2022-12-26T13:14:11.605Z","updated":"2023-02-01T05:47:45.032Z","comments":true,"path":"api/articles/用Promise实现一个简单的红绿灯效果.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10001.gif","text":"用 Promise 实现一个简单的红绿灯效果 JS 部分： // js部分 const delay = &#123; query: Promise.resolve(), //初始化一个状态为成功的Promise对象 wait(timer) &#123; // this.query...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ES6新增详解","uid":"0b7869d8948a44428f2ef3d011726b80","slug":"ES６新增详解","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T05:52:10.799Z","comments":true,"path":"api/articles/ES６新增详解.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10002.jpeg","text":"ES6 新增详解let 声明变量和 const 声明常量，两个都有块级作用域ES5中是没有块级作用域的，并且var有变量提升，在let中，使用的变量一定要进行声明 箭头函数ES6中的函数定义不再使用关键字function()，而是利用了()&#x3D;&gt;来进行定义 特点：箭...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"web前端","slug":"web前端","count":3,"path":"api/categories/web前端.json"}],"tags":[{"name":"ES6笔记","slug":"ES6笔记","count":2,"path":"api/tags/ES6笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}