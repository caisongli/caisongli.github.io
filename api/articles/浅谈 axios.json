{"title":"axios","uid":"33876cf3e210da358d8e4b065eea88e6","slug":"浅谈 axios","date":"2022-12-26T13:14:11.605Z","updated":"2023-02-01T05:47:19.676Z","comments":true,"path":"api/articles/浅谈 axios.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/hz1.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"浅谈-axios\"><a href=\"#浅谈-axios\" class=\"headerlink\" title=\"浅谈 axios\"></a><strong>浅谈 axios</strong></h1><hr>\n<h1 id=\"什么是-axios？\"><a href=\"#什么是-axios？\" class=\"headerlink\" title=\"什么是 axios？\"></a>什么是 axios？</h1><hr>\n<p>Axios 是一个基于 promise 的 异步 ajax 请求库，前端最流行的 ajax 请求库。简单的讲就是可以发送 get、post 请求，负责与后端交互。<br>Vue、React 等框架的出现，促使了 Axios 轻量级库的出现， react/vue 官方都推荐使用 axios 发 ajax 请求。<br>因为 Vue 等，不需要操作 Dom，所以不需要引入 Jquery.js 了</p>\n<hr>\n<h1 id=\"axios-的特点？\"><a href=\"#axios-的特点？\" class=\"headerlink\" title=\"axios 的特点？\"></a>axios 的特点？</h1><hr>\n<ol>\n<li><p>可以<strong>转换请求数据和响应数据</strong>，并对响应回来的内容自动转换成 JSON 类型的数据</p>\n</li>\n<li><p>Axios 是一个<strong>基于 promise 的异步 ajax 请求库</strong>，支持 promise 所有的 API</p>\n</li>\n<li><p><strong>拦截请求和响应</strong>（就是前端发送请求前，可以设置自动拦截请求，相当于给请求加条件）</p>\n</li>\n<li><p>axios.all(promises): <strong>批量发送多个（异步）请求</strong></p>\n</li>\n<li><p><strong>axios 在览器端/node 端都可以使用</strong></p>\n</li>\n<li><p><strong>安全性更高，客户端支持防御 XSRF（</strong>跨站请求伪造<strong>）</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，假冒的网站是拿不到你cookie中得key的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h1 id=\"axios-常用的两种请求方式\"><a href=\"#axios-常用的两种请求方式\" class=\"headerlink\" title=\"axios 常用的两种请求方式\"></a>axios 常用的两种请求方式</h1><hr>\n<ol>\n<li><p><strong>axios({method:’方法’，url: ‘’baseURL: ‘’，data:{name: ‘cc’, sex: ‘man’} })</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>axios.方法名(url, {name:’cc’, sex:’man’})</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//get请求 用于列表和信息查询</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//删除</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//post请求用与提交数据，添加信息</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//更新操作</span>\n\n<span class=\"token comment\">//例如</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'cc'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span><span class=\"token string\">'man'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h1 id=\"说下你了解的-axios-相关配置属性？\"><a href=\"#说下你了解的-axios-相关配置属性？\" class=\"headerlink\" title=\"说下你了解的 axios 相关配置属性？\"></a>说下你了解的 axios 相关配置属性？</h1><hr>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url</span><span class=\"token template-punctuation string\">`</span></span>是用于请求的服务器<span class=\"token constant\">URL</span> ；\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">method</span><span class=\"token template-punctuation string\">`</span></span>是创建请求时使用的方法<span class=\"token punctuation\">,</span>默认是<span class=\"token keyword\">get</span> ；\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">baseURL</span><span class=\"token template-punctuation string\">`</span></span>将自动加在<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url</span><span class=\"token template-punctuation string\">`</span></span>前面，除非<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url</span><span class=\"token template-punctuation string\">`</span></span>是一个绝对<span class=\"token constant\">URL</span>。它可以通过设置一个<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">baseURL</span><span class=\"token template-punctuation string\">`</span></span>便于为axios实例的方法传递相对<span class=\"token constant\">URL</span> ；\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">headers</span><span class=\"token template-punctuation string\">`</span></span>是即将被发送的自定义请求头；\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">params</span><span class=\"token template-punctuation string\">`</span></span>是即将与请求一起发送的<span class=\"token constant\">URL</span><span class=\"token literal-property property\">参数，必须是一个无格式对象。params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token constant\">ID</span><span class=\"token operator\">:</span><span class=\"token number\">12345</span><span class=\"token punctuation\">&#125;</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"axios-拦截器-【-在请求或响应被-then-或-catch-处理前拦截它们-】\"><a href=\"#axios-拦截器-【-在请求或响应被-then-或-catch-处理前拦截它们-】\" class=\"headerlink\" title=\"axios 拦截器 【 在请求或响应被 then 或 catch 处理前拦截它们 】\"></a>axios 拦截器 【 在请求或响应被 then 或 catch 处理前拦截它们 】</h1><hr>\n<h4 id=\"拦截器分为请求拦截器和响应拦截器：\"><a href=\"#拦截器分为请求拦截器和响应拦截器：\" class=\"headerlink\" title=\"拦截器分为请求拦截器和响应拦截器：\"></a>拦截器分为请求拦截器和响应拦截器：</h4><ul>\n<li><strong>请求拦截器</strong>（interceptors.requst）是指可以<strong>拦截每次或指定 HTTP 请求，并可修改配置项</strong></li>\n<li><strong>响应拦截器</strong>（interceptors.response）可以在每次 HTTP 请求后拦截住每次或指定 HTTP 请求，并可<strong>修改返回结果项</strong></li>\n</ul>\n<h4 id=\"先创建实例：\"><a href=\"#先创建实例：\" class=\"headerlink\" title=\"先创建实例：\"></a>先创建实例：</h4><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">import axios from &quot;axios&quot;;\n\n&#x2F;&#x2F; todo 创建实例\nconst instance &#x3D; axios.create(&#123;\n  baseURL: &quot;http:&#x2F;&#x2F;www.pudge.wang:3080&#x2F;api&quot;,\n  timeout: 10000, &#x2F;&#x2F; 超时时间\n  headers: &#123; &quot;content-type&quot;: &quot;application&#x2F;json&quot; &#125;, &#x2F;&#x2F; 表单提交 form-data\n  &#x2F;&#x2F; params: &#123;\n  &#x2F;&#x2F;   &#x2F;&#x2F; 只有get请求会来加params\n  &#x2F;&#x2F;   &#x2F;&#x2F; ID: 12345,\n  &#x2F;&#x2F;   token: localStorage.getItem(&quot;token&quot;),\n  &#x2F;&#x2F; &#125;,\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"添加请求拦截器\"><a href=\"#添加请求拦截器\" class=\"headerlink\" title=\"添加请求拦截器:\"></a>添加请求拦截器:</h1><hr>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// todo 添加请求拦截器</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  function <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// console.log(config);</span>\n    <span class=\"token comment\">// 在发送请求之前做些什么</span>\n    <span class=\"token comment\">// config.params.token = localStorage.getItem(\"token\");</span>\n\n    <span class=\"token comment\">// 对一些特殊的接口做一些特殊的处理</span>\n    <span class=\"token comment\">// 一个项目很多的请求，绝大部分请求都是数据的请求，请求头application/json</span>\n    <span class=\"token comment\">// 偶尔有个别接口要做表单提交</span>\n\n    <span class=\"token comment\">// if (config.url === \"/upload\") &#123;</span>\n    <span class=\"token comment\">//   config.headers = &#123; \"content-type\": \"form-data\" &#125;;</span>\n    <span class=\"token comment\">// &#125;</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  function <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对请求错误做些什么</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"添加响应拦截器\"><a href=\"#添加响应拦截器\" class=\"headerlink\" title=\"添加响应拦截器:\"></a>添加响应拦截器:</h1><hr>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo 添加响应拦截器</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 在刚刚得到数据的时候触发</span>\n    <span class=\"token comment\">// 对响应数据做点什么</span>\n    <span class=\"token comment\">// console.log(response);</span>\n\n    <span class=\"token comment\">// 404是没法判断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务端错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对响应错误做点什么</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"axios-简单封装\"><a href=\"#axios-简单封装\" class=\"headerlink\" title=\"axios 简单封装\"></a>axios 简单封装</h1><hr>\n<h4 id=\"创建-http-js：\"><a href=\"#创建-http-js：\" class=\"headerlink\" title=\"创建 http.js：\"></a>创建 http.js：</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">axios</span> from <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo 创建实例</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.pudge.wang:3080/api\"</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 超时时间</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表单提交 form-data</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> instance\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> params <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// console.log(res);</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nexport <span class=\"token keyword\">default</span> http<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n","text":"浅谈 axios 什么是 axios？ Axios 是一个基于 promise 的 异步 ajax 请求库，前端最流行的 ajax 请求库。简单的讲就是可以发送 get、post 请求，负责与后端交互。Vue、React 等框架的出现，促使了 Axios 轻量级库的出现， rea...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"数据请求","slug":"数据请求","count":1,"path":"api/categories/数据请求.json"}],"tags":[{"name":"网络请求","slug":"网络请求","count":1,"path":"api/tags/网络请求.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%85%E8%B0%88-axios\"><span class=\"toc-text\">浅谈 axios</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F\"><span class=\"toc-text\">什么是 axios？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#axios-%E7%9A%84%E7%89%B9%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">axios 的特点？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#axios-%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">axios 常用的两种请求方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%8B%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%9A%84-axios-%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">说下你了解的 axios 相关配置属性？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#axios-%E6%8B%A6%E6%88%AA%E5%99%A8-%E3%80%90-%E5%9C%A8%E8%AF%B7%E6%B1%82%E6%88%96%E5%93%8D%E5%BA%94%E8%A2%AB-then-%E6%88%96-catch-%E5%A4%84%E7%90%86%E5%89%8D%E6%8B%A6%E6%88%AA%E5%AE%83%E4%BB%AC-%E3%80%91\"><span class=\"toc-text\">axios 拦截器 【 在请求或响应被 then 或 catch 处理前拦截它们 】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8%E5%88%86%E4%B8%BA%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%9A\"><span class=\"toc-text\">拦截器分为请求拦截器和响应拦截器：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">先创建实例：</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">添加请求拦截器:</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">添加响应拦截器:</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#axios-%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">axios 简单封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-http-js%EF%BC%9A\"><span class=\"toc-text\">创建 http.js：</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"简单的数据转换(二)","uid":"efb0492528fda01248e58bf9c3ab3caa","slug":"【前端面试题】——数据转换二","date":"2022-12-26T13:14:11.605Z","updated":"2023-02-01T05:45:15.051Z","comments":true,"path":"api/articles/【前端面试题】——数据转换二.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10001.jpg","text":"【前端面试题】——数据转换二初始数据：const data = &#123; a: &#123; b: 3 &#125;, c: 10, d: [1, 8] &#125;; 转换成： const data = &#123;a.b: 3, c: 10, d[1]: 8&#125; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"用Promise实现简单的红绿灯效果","uid":"bff22f3fd584462e1917ba54fb01e458","slug":"用Promise实现一个简单的红绿灯效果","date":"2022-12-26T13:14:11.605Z","updated":"2023-02-01T05:47:45.032Z","comments":true,"path":"api/articles/用Promise实现一个简单的红绿灯效果.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10001.gif","text":"用 Promise 实现一个简单的红绿灯效果 JS 部分： // js部分 const delay = &#123; query: Promise.resolve(), //初始化一个状态为成功的Promise对象 wait(timer) &#123; // this.query...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}