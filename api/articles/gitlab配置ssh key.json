{"title":"gitlab 配置 ssh key","uid":"8af137cd21190334ea8f2f15702e9068","slug":"gitlab配置ssh key","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.604Z","comments":true,"path":"api/articles/gitlab配置ssh key.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"gitlab-配置-ssh-key\"><a href=\"#gitlab-配置-ssh-key\" class=\"headerlink\" title=\"gitlab 配置 ssh key\"></a>gitlab 配置 ssh key</h1><p>打开本地 git bash 或者 cmd,使用如下命令生成<a href=\"https://so.csdn.net/so/search?q=ssh&spm=1001.2101.3001.7020\">ssh</a>公钥和私钥对</p>\n<p><code>ssh-keygen -t rsa -C &#39;xxx@xxx.com&#39;</code> 然后一路回车(-C 参数是你的邮箱地址)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Enter 一路回车,遇到 y 选 y</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">C:\\Users\\LL&gt;ssh-keygen\nGenerating public&#x2F;private rsa key pair.\nEnter file in which to save the key (C:\\Users\\LL&#x2F;.ssh&#x2F;id_rsa):\nC:\\Users\\LL&#x2F;.ssh&#x2F;id_rsa already exists.\nOverwrite (y&#x2F;n)? y\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in C:\\Users\\LL&#x2F;.ssh&#x2F;id_rsa.\nYour public key has been saved in C:\\Users\\LL&#x2F;.ssh&#x2F;id_rsa.pub.\nThe key fingerprint is:\nSHA256:TJf1AiiRDMYxs4bTcjOnIKrGn42s1yZfWIwRbrcIEHw ll\\ll@LL\nThe key&#39;s randomart image is:\n+---[RSA 3072]----+\n|.o..*&#x3D;.o .. .    |\n| ..Eo+&#x3D; .  + .   |\n|. *.B+.o. o . .  |\n|.. *o&#x3D;*o..   .   |\n|.   .o +S        |\n|o     o          |\n|.o  .. .         |\n|. oo+o.          |\n| .o&#x3D;+o           |\n+----[SHA256]-----+\n到此就是完成了！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后打开<del>/.ssh/id_rsa.pub 文件(</del>表示用户目录，比如我的 windows 就是 C:\\Users\\LL.ssh)，复制其中的内容</p>\n<p>打开 gitlab,找到 Profile Settings–&gt;SSH Keys—&gt;Add SSH Key,并把上一步中复制的内容粘贴到 Key 所对应的文本框，在 Title 对应的文本框中给这个 sshkey 设置一个名字，点击 Add key 按钮</p>\n<img src=\"https://img1.imgtp.com/2022/09/10/OFvHa8Bf.jpg\" />\n\n<p>为啥要设置 ssh 协议呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 我们为什么要使用ssh协议呢？因为ssh更加安全，然后更加方便，比如我们公司的gitlab由http协议换成了https协议，那么如果你是使用http协议管理代码，那么需要修改所有的项目中的git地址变成https，这会把我们给逼疯的！但是如果我们一开始就是用ssh协议，这不需要任何的修改，简直不能再爽一点了。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"使用-GitBash-对-GitLab-服务器上的项目进行操作\"><a href=\"#使用-GitBash-对-GitLab-服务器上的项目进行操作\" class=\"headerlink\" title=\"使用 GitBash 对 GitLab 服务器上的项目进行操作\"></a>使用 GitBash 对 GitLab 服务器上的项目进行操作</h1><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>命令</th>\n<th>命令说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>$ git –version</td>\n<td>检查 Git 的版本</td>\n</tr>\n<tr>\n<td>2</td>\n<td>$ git config –global user.name “Coffee”</td>\n<td>提交信息时添加 Git 用户名</td>\n</tr>\n<tr>\n<td>3</td>\n<td>$ git config –global user.name</td>\n<td>验证输入的用户名</td>\n</tr>\n<tr>\n<td>4</td>\n<td>$ git config –global user.email “<a href=\"mailto:&#x78;&#120;&#x78;&#120;&#120;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;\">&#x78;&#120;&#x78;&#120;&#120;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;</a>“</td>\n<td>设置电子邮件地址</td>\n</tr>\n<tr>\n<td>5</td>\n<td>$ git config –global user.email</td>\n<td>验证输入的电子邮件地址</td>\n</tr>\n<tr>\n<td>6</td>\n<td>$ git config –global –list</td>\n<td>检查输入的信息</td>\n</tr>\n<tr>\n<td>7</td>\n<td>$ git checkout master</td>\n<td>获取对主分支所做的最新更改</td>\n</tr>\n<tr>\n<td>8</td>\n<td>$ git pull origin <strong>NAME-OF-BRANCH</strong> -u</td>\n<td>获取工作目录的最新更改(<strong><code>NAME-OF-BRANCH</code>可以是’master’或任何其他现有的分支</strong>)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>$ git checkout -b branch-name</td>\n<td>创建一个新的分支</td>\n</tr>\n<tr>\n<td>10</td>\n<td>$git clone 项目的 ssh 地址</td>\n<td>克隆项目到本地</td>\n</tr>\n</tbody></table>\n<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1] 也是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Git 的作用是用于管理项目的源代码<br>它主要用于管理 开发环境(Dev)下的项目代码</p>\n<p>市面上主要有两类源代码管理工具</p>\n<ol>\n<li>集中式代码管理工具 (svn)</li>\n<li>分布式代码管理工具 (git)</li>\n</ol>\n<p>官网<br><a href=\"https://git-scm.com/\">https://git-scm.com/</a><br>git 是一个跨平台的项目管理工具 可以运行在 Windows Linux Unix OSX</p>\n<h3 id=\"git-与-github\"><a href=\"#git-与-github\" class=\"headerlink\" title=\"git 与 github\"></a>git 与 github</h3><p>git 是目前世界上最先进分布式的版本控制系统<br>github 是一个仓库</p>\n<h3 id=\"git-基本操作\"><a href=\"#git-基本操作\" class=\"headerlink\" title=\"git 基本操作\"></a>git 基本操作</h3><h4 id=\"全局用户配置\"><a href=\"#全局用户配置\" class=\"headerlink\" title=\"全局用户配置\"></a>全局用户配置</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每台计算机只需要执行一次配置</span>\n$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">'li xxx'</span>\n$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">'xxx@163.com'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>项目构建 在项目的根目录创建文件 (README.md .gitignore)</li>\n<li>在 .gitignore 中 存放需要忽略的文件或目录 (不需要 git 管理的文件或目录)</li>\n<li>在项目的根目录 执行 <code>$ git init</code> 进行仓库初始化操作</li>\n<li>进行项目初始化 <code>$ npm init -y</code></li>\n</ol>\n<h4 id=\"本地仓库操作\"><a href=\"#本地仓库操作\" class=\"headerlink\" title=\"本地仓库操作\"></a>本地仓库操作</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看状态   （查看文件是否被修改 被删除 或者添加）</span>\n$ <span class=\"token function\">git</span> status\n\n<span class=\"token comment\"># 查看版本的差别</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">diff</span>\n\n<span class=\"token comment\"># 添加管理(将文件或目录添加到git本地仓库的暂存区)</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> filename    <span class=\"token comment\"># 添加文件到暂存区</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>           <span class=\"token comment\"># 添加当前目录所有内容到暂存区</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> path/       <span class=\"token comment\"># 添加指定目录到暂存区</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">--all</span>       <span class=\"token comment\"># 添加所有内容到暂存区</span>\n\n<span class=\"token comment\"># 将文件移出暂存区</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cached</span> filename\n\n<span class=\"token comment\"># 将暂存区的内容提交到本地仓库</span>\n$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'message'</span>    //这里的message可以是版本号\n\n<span class=\"token comment\"># 查看提交日志</span>\n$ <span class=\"token function\">git</span> log\n\n<span class=\"token comment\"># 回退一个版本</span>\n$ <span class=\"token function\">git</span> reset HEAD^\n\n<span class=\"token comment\"># 回退到指定版本</span>\n$ <span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> 提交记录的前6位\n\n<span class=\"token comment\"># 查看帮助</span>\n$ <span class=\"token function\">git</span> <span class=\"token parameter variable\">--help</span>\n\n<span class=\"token comment\"># 恢复文件</span>\n$ <span class=\"token function\">git</span> checkout filename\n\n<span class=\"token comment\"># 查看所有历史版本</span>\n$ <span class=\"token function\">git</span> reflog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"分支相关操作\"><a href=\"#分支相关操作\" class=\"headerlink\" title=\"分支相关操作\"></a>分支相关操作</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看分支</span>\n$ <span class=\"token function\">git</span> branch\n\n<span class=\"token comment\"># 创建分支</span>\n$ <span class=\"token function\">git</span> branch 分支名\n\n<span class=\"token comment\"># 切换分支</span>\n$ <span class=\"token function\">git</span> checkout 分支名  或者    <span class=\"token function\">git</span> switch 分支名\n\n<span class=\"token comment\"># 创建并切换分支</span>\n$ <span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> 分支名\n\n<span class=\"token comment\"># 合并分支内容</span>\n$ <span class=\"token function\">git</span> merge 分支名\n\n<span class=\"token comment\"># 删除分支</span>\n$ <span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> 分支名\n\n<span class=\"token comment\"># 查看分支记录</span>\n$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--graph</span> <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline\n\n<span class=\"token comment\"># 直接拉取数据到对应的分支</span>\n$ <span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"远程仓库操作\"><a href=\"#远程仓库操作\" class=\"headerlink\" title=\"远程仓库操作\"></a>远程仓库操作</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成密钥对 (公钥 / 私钥)</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">'里面输入邮箱地址'</span>\n\n<span class=\"token comment\"># 设置远程仓库地址</span>\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/jxsrzj0325/suning.com.git\n\n<span class=\"token comment\"># 将本地仓库提交到远程仓库</span>\n$ <span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master\n\n<span class=\"token comment\"># 查看所有源</span>\n$ <span class=\"token function\">git</span> remote\n\n<span class=\"token comment\"># 查看源的路径</span>\n$ <span class=\"token function\">git</span> remote get-url 名称\n\n<span class=\"token comment\"># 克隆仓库(下载 从无到有)</span>\n$ <span class=\"token function\">git</span> clone https://gitee.com/rootbk/suning.com.git\n\n<span class=\"token comment\"># 拉取(已有 更新)</span>\n$ <span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"组员的流程-（刚拿到项目时）\"><a href=\"#组员的流程-（刚拿到项目时）\" class=\"headerlink\" title=\"组员的流程 （刚拿到项目时）\"></a>组员的流程 （刚拿到项目时）</h3><ol>\n<li>git clone xxxxxxxx (获取克隆的地址)</li>\n<li>git checkout -b 分支名 (创建并切换分支)</li>\n<li>git add . (存储内容到暂存区)</li>\n<li>git commit -m “xxx” (将暂存区的内容提交到本地仓库)</li>\n<li>git push –set-upstream origin 分支名 第一次需要如此上传</li>\n</ol>\n<h3 id=\"组员的流程-（项目开始时）\"><a href=\"#组员的流程-（项目开始时）\" class=\"headerlink\" title=\"组员的流程 （项目开始时）\"></a>组员的流程 （项目开始时）</h3><ol>\n<li>git pull origin master 将远程的 master 拉到自己的 master</li>\n<li>git checkout 分支名 (切换回到自己的分支)</li>\n<li>git merge master ( 将自己的 master 合并到自己的分支 让分支是最新的)</li>\n<li>开始写代码 ing</li>\n<li>git add . (存储内容到暂存区)</li>\n<li>git commit -m “xxx2” (将暂存区的内容提交到本地仓库)</li>\n<li>git pull origin master (将远程的最新的代码 拉到自己的分支)</li>\n<li>可能需要解决冲突(如果解决了冲突，需要重新 add 和 commit)</li>\n<li>git push (上传)</li>\n</ol>\n<h3 id=\"组长\"><a href=\"#组长\" class=\"headerlink\" title=\"组长\"></a>组长</h3><hr>\n<p>​ git fetch –all （查看所有分支）</p>\n<p>​ git checkout self （切换到相应组员分支）</p>\n<p>​ 启动项目并检查</p>\n<p>​ git checkout master （切换回主分支）</p>\n<p>​ git merge self （将检查无误的组员分支合并到主分支）</p>\n<p>​ git push (将本地的 master 推送到远程的 master)</p>\n<hr>\n<p>​ git checkout self</p>\n<p>​ git pull (将远程的 self 拉到本地的 self)</p>\n<p>​ 启动项目并检查</p>\n<p>​ git checkout master</p>\n<p>​ git merge self</p>\n<p>​ git push (将本地的 master 推送到远程的 master)</p>\n","text":"gitlab 配置 ssh key打开本地 git bash 或者 cmd,使用如下命令生成ssh公钥和私钥对 ssh-keygen -t rsa -C &#39;xxx@xxx.com&#39; 然后一路回车(-C 参数是你的邮箱地址) ssh-keygen Enter 一路回...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"gitlab","slug":"gitlab","count":1,"path":"api/categories/gitlab.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#gitlab-%E9%85%8D%E7%BD%AE-ssh-key\"><span class=\"toc-text\">gitlab 配置 ssh key</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-GitBash-%E5%AF%B9-GitLab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">使用 GitBash 对 GitLab 服务器上的项目进行操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Git\"><span class=\"toc-text\">Git</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-%E4%B8%8E-github\"><span class=\"toc-text\">git 与 github</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">git 基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">全局用户配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">本地仓库操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">分支相关操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">远程仓库操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%91%98%E7%9A%84%E6%B5%81%E7%A8%8B-%EF%BC%88%E5%88%9A%E6%8B%BF%E5%88%B0%E9%A1%B9%E7%9B%AE%E6%97%B6%EF%BC%89\"><span class=\"toc-text\">组员的流程 （刚拿到项目时）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%91%98%E7%9A%84%E6%B5%81%E7%A8%8B-%EF%BC%88%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%A7%8B%E6%97%B6%EF%BC%89\"><span class=\"toc-text\">组员的流程 （项目开始时）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E9%95%BF\"><span class=\"toc-text\">组长</span></a></li></ol></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React小记【Redux异步库与模块化】","uid":"25f4b03abe20cfcdd61d2d9469f9b7df","slug":"Redux异步库与模块化（Redux-saga)","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.604Z","comments":true,"path":"api/articles/Redux异步库与模块化（Redux-saga).json","keywords":null,"cover":null,"text":"Redux 异步库与模块化（Redux-saga) 安装初始化后创建 sagas.js 文件（负责协调那些复杂或者异步的操作）【使用了 generator 函数，redux-saga 让你可以用 同步的方式来写异步代码】 import &#123; takeEvery, put,...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"关于vue3","uid":"6918b95b981bf0c727e4f883e20aa202","slug":"vue3快速上手","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/vue3快速上手.json","keywords":null,"cover":[],"text":" 1.Vue3 简介 2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王） 耗时 2 年多、2600+次提交、30+个 RFC、600+次 PR、99 位贡献者 github 上的 tags 地址：https://github.co...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[{"name":"vue3","slug":"vue3","count":1,"path":"api/tags/vue3.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}