{"title":"React小记（二）","uid":"343c996ed04fbebbae1554517bbe60b6","slug":"React学习总结( 二 )","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:48:20.644Z","comments":true,"path":"api/articles/React学习总结( 二 ).json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq2.jpeg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"React-学习总结-二\"><a href=\"#React-学习总结-二\" class=\"headerlink\" title=\"React 学习总结( 二 )\"></a>React 学习总结( 二 )</h1><h1 id=\"1、HOC-高阶组件\"><a href=\"#1、HOC-高阶组件\" class=\"headerlink\" title=\"1、HOC(高阶组件)\"></a>1、HOC(高阶组件)</h1><hr>\n<h4 id=\"Higher-Order-Components-就是一个函数，传给它一个组件，它返回一个新的组件。\"><a href=\"#Higher-Order-Components-就是一个函数，传给它一个组件，它返回一个新的组件。\" class=\"headerlink\" title=\"Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。\"></a><strong>Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。</strong></h4><p>作用：<font color='Peach'>可以给组件添加相同的结构,添加相同的属性等等,增强组件的功能，以及进行复用</font></p>\n<p><font color='orange'>温馨提示：一般用 <strong>with xxx.js</strong> 单独放置高阶组件，默认就是高阶组件</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hoc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Comp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// todo &#123;...this.props&#125;将这个组件接收到的所有的props，接着往下传</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Comp count<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// count=3</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>高阶组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// const App2 = hoc(App);</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">hoc</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"2、Portal\"><a href=\"#2、Portal\" class=\"headerlink\" title=\"2、Portal\"></a>2、Portal</h1><hr>\n<h4 id=\"Portals-提供了一个最好的在父组件包含的-DOM-结构层级外的-DOM-节点渲染组件的方法。\"><a href=\"#Portals-提供了一个最好的在父组件包含的-DOM-结构层级外的-DOM-节点渲染组件的方法。\" class=\"headerlink\" title=\"Portals 提供了一个最好的在父组件包含的 DOM 结构层级外的 DOM 节点渲染组件的方法。\"></a><strong>Portals 提供了一个最好的在父组件包含的 DOM 结构层级外的 DOM 节点渲染组件的方法。</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ReactDOM.createPortal(child,container);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"第一个参数-child-是可渲染的-react-子项，比如元素，字符串或者片段等。第二个参数-container-是一个-DOM-元素。\"><a href=\"#第一个参数-child-是可渲染的-react-子项，比如元素，字符串或者片段等。第二个参数-container-是一个-DOM-元素。\" class=\"headerlink\" title=\"第一个参数 child 是可渲染的 react 子项，比如元素，字符串或者片段等。第二个参数 container 是一个 DOM 元素。\"></a><strong>第一个参数 child 是可渲染的 react 子项，比如元素，字符串或者片段等。第二个参数 container 是一个 DOM 元素。</strong></h5><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; createPortal &#125; from &quot;react-dom&quot;;\n\nclass Child extends Component &#123;\n  render() &#123;\n    return createPortal(&lt;div&gt;child组件&lt;&#x2F;div&gt;, document.querySelector(&quot;body&quot;));\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"3、组件的生命周期-旧版\"><a href=\"#3、组件的生命周期-旧版\" class=\"headerlink\" title=\"3、组件的生命周期(旧版)\"></a>3、组件的生命周期(旧版)</h1><hr>\n<h4 id=\"前提：只有类组件才有生命周期！\"><a href=\"#前提：只有类组件才有生命周期！\" class=\"headerlink\" title=\"前提：只有类组件才有生命周期！\"></a><strong>前提</strong>：<font color='red'>只有类组件才有生命周期！</font></h4><h3 id=\"一、挂载阶段\"><a href=\"#一、挂载阶段\" class=\"headerlink\" title=\"一、挂载阶段\"></a>一、挂载阶段</h3><h5 id=\"constructor就是-react-的第一个生命周期，constructor-是组件被实例化的时候就调用，只调用一次\"><a href=\"#constructor就是-react-的第一个生命周期，constructor-是组件被实例化的时候就调用，只调用一次\" class=\"headerlink\" title=\"constructor就是 react 的第一个生命周期，constructor 是组件被实例化的时候就调用，只调用一次\"></a><strong>constructor</strong>就是 react 的第一个生命周期，constructor 是组件被实例化的时候就调用，只调用一次</h5><p><font color='Salmon '>特点：可以将接收 props，当作初始值，达到修改 props 的效果</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// constructor就是react的第一个生命周期，constructor是组件被实例化的时候就调用，只调用一次</span>\n <span class=\"token comment\">// 初始化state，改变事件的this，得到ref变量等等以及处理props</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token operator\">+</span>props<span class=\"token punctuation\">.</span>属性<span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ipt <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"componentWillMount-将被弃用\"><a href=\"#componentWillMount-将被弃用\" class=\"headerlink\" title=\"componentWillMount      将被弃用\"></a><font color='red'>componentWillMount      将被弃用</font></h4><h4 id=\"表示挂载前-已经被废弃了-没啥用，不能做数据请求-因为-fiber-16-版本-算法的存在，有可能导致请求做多次，影响性能\"><a href=\"#表示挂载前-已经被废弃了-没啥用，不能做数据请求-因为-fiber-16-版本-算法的存在，有可能导致请求做多次，影响性能\" class=\"headerlink\" title=\"表示挂载前,已经被废弃了,没啥用，不能做数据请求, 因为 fiber(16 版本)算法的存在，有可能导致请求做多次，影响性能\"></a>表示挂载前,已经被废弃了,没啥用，不能做数据请求, 因为 fiber(16 版本)算法的存在，有可能导致请求做多次，影响性能</h4><h3 id=\"render-：render-也是生命周期，它必须要返回-jsx-页面显示的内容，可以做解构以及对数据的处理-不要在-render-做数据请求\"><a href=\"#render-：render-也是生命周期，它必须要返回-jsx-页面显示的内容，可以做解构以及对数据的处理-不要在-render-做数据请求\" class=\"headerlink\" title=\"render ：render 也是生命周期，它必须要返回 jsx, 页面显示的内容，可以做解构以及对数据的处理, 不要在 render 做数据请求\"></a>render ：render 也是生命周期，它必须要返回 jsx, 页面显示的内容，可以做解构以及对数据的处理, 不要在 render 做数据请求</h3><p><font color='Peach'>componentDidMount  用的很多</font></p>\n<h4 id=\"表示挂载结束-可以做任意的事情，包括数据请求\"><a href=\"#表示挂载结束-可以做任意的事情，包括数据请求\" class=\"headerlink\" title=\"表示挂载结束,可以做任意的事情，包括数据请求\"></a>表示挂载结束,可以做任意的事情，包括数据请求</h4><p><font color='Salmon '>特点：可以数据请求，设置定时器</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentDidMount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"二、更新阶段\"><a href=\"#二、更新阶段\" class=\"headerlink\" title=\"二、更新阶段\"></a>二、更新阶段</h3><p><font color='Peach'>shouldComponentUpdate 用的较多</font></p>\n<p>询问是否需要更新， 必须要返回 true 或者 false</p>\n<p>触发时机：<font color='orage'>父级 props 改变和内部的 state 数据改变</font></p>\n<p>参数：nextProps、nextState,更新后的 props 和更新后的 state</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shouldComponentUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20 更新后</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10，默认10</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> nextState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span><span class=\"token comment\">//优化后</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>扩展：<font color='Peach'>PureComponent，有复杂类型不好判断，所以有了它可以让 react 自己控制是否需要更新，值的类型也不限制,推荐直接写上</font></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">import React, &#123; PureComponent &#125; from &quot;react&quot;;&#x2F;&#x2F;先结构出来\n\nclass Child extends PureComponent &#123; &#x2F;&#x2F;直接用\n  render() &#123;\n    console.log(&quot;child render&quot;);\n    return &lt;div&gt;child组件 - &#123;this.props.count&#125;&lt;&#x2F;div&gt;;\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><font color='red'>componentWillUpdate 将被弃用</font></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">UNSAFE_componentWillUpdate() &#123;\n   &#x2F;&#x2F; 跟vue不同的是，这里是数据是改变之前的数据\n   &#x2F;&#x2F; console.log(this.state.count);\n   console.log(&quot;componentWillUpdate&quot;);\n &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><font color='Peach'>componentDidUpdate  更新后  </font><font color='orange'>不要在这里修改数据,会造成死循环</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// componentDidUpdate表示更新后</span>\n<span class=\"token comment\">// 不要在这里修改数据,会造成死循环</span>\n<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// this.setState(&#123;</span>\n  <span class=\"token comment\">//   count: 30</span>\n  <span class=\"token comment\">// &#125;)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentDidUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"三、卸载阶段\"><a href=\"#三、卸载阶段\" class=\"headerlink\" title=\"三、卸载阶段\"></a>三、卸载阶段</h3><p><font color='Peach'>componentWillUnmount 用的较多</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo 卸载阶段</span>\n<span class=\"token comment\">// todo 卸载定时器，卸载websocket，移出事件监听，销毁echarts的实例等第三方插件</span>\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentWillUnmount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><font color='Salmon '>父子组件渲染顺序：只要父组件渲染了，子组件默认也必定会渲染</font></strong></p>\n<p><strong><font color='Salmon '>父 render -&gt; 子 render -&gt; 子 componentDidMount -&gt; 父 componentDidMount</font></strong></p>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220805212645645.png\" alt=\"image-20220805212645645\"></p>\n<h1 id=\"4、组件的生命周期-新版-16-3-之后\"><a href=\"#4、组件的生命周期-新版-16-3-之后\" class=\"headerlink\" title=\"4、组件的生命周期(新版 16.3 之后)\"></a>4、组件的生命周期(新版 16.3 之后)</h1><hr>\n<p><img src=\"C:\\Users\\LL\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220805214333021.png\" alt=\"image-20220805214333021\"></p>\n<p><strong>1.getDerivedStateFromProps</strong> <font color='each'>必须要加 static,不常用</font></p>\n<p>触发时机：<font color='orage'>父级 props 改变和内部的 state 数据改变</font></p>\n<p>此方法适用于<a href=\"https://react.docschina.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">罕见的用例</a>，即 state 的值在任何时候都取决于 props</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo getDerivedStateFromProps必须要加static, 需要有state</span>\n  <span class=\"token comment\">// todo 根据props的值得到一个新的state(可以有一个state，让这个state的值一直保持和某个props一致)</span>\n  <span class=\"token comment\">// todo 里面必须要返回一个对象或者null</span>\n state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">prevCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 父级初始值为20,设置了定时器，2秒后变成40，每次改变都会触发该生命周期</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDerivedStateFromProps\"</span>）\n    <span class=\"token comment\">// todo 1. nextProps.num 20, nextState.prevCount 10 -> count 20 prevCount 20</span>\n    <span class=\"token comment\">// todo 2. nextProps.num 40, nextState.prevCount 20 -> count 40 prevCount 40</span>\n    <span class=\"token comment\">// todo 3. nextProps.num 40, nextState.prevCount 40 -> null //最后一次state的触发结果</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>num <span class=\"token operator\">===</span> nextState<span class=\"token punctuation\">.</span>prevCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">prevCount</span><span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 修改后触发 static getDerivedStateFromProps</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.getSnapshotBeforeUpdate</strong> <font color='each'>不常用</font></p>\n<p><font color='each'>描述：在更新之前得到一个快照</font> <font color='each'>注意！必须和 componentDidUpdate 一起使用</font></p>\n<p>作用：在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</p>\n<p>此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</p>\n<p>应返回 snapshot 的值（或 <code>null</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo 在更新之前得到一个快照</span>\n<span class=\"token comment\">// todo 必须和componentDidUpdate一起使用</span>\n<span class=\"token comment\">// todo 可以得到dom更新前的ui信息</span>\n<span class=\"token comment\">// todo 此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</span>\n<span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSnapshotBeforeUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// todo 传递给dom更新以后</span>\n<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentDidUpdate\"</span><span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","text":"React 学习总结( 二 )1、HOC(高阶组件) Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。作用：可以给组件添加相同的结构,添加相同的属性等等,增强组件的功能，以及进行复用 温馨提示：一般用 with xxx.js 单独...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%E4%BA%8C\"><span class=\"toc-text\">React 学习总结( 二 )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81HOC-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">1、HOC(高阶组件)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Higher-Order-Components-%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BC%A0%E7%BB%99%E5%AE%83%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%AE%83%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E4%BB%B6%E3%80%82\"><span class=\"toc-text\">Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Portal\"><span class=\"toc-text\">2、Portal</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Portals-%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%80%E5%A5%BD%E7%9A%84%E5%9C%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84-DOM-%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%A4%96%E7%9A%84-DOM-%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82\"><span class=\"toc-text\">Portals 提供了一个最好的在父组件包含的 DOM 结构层级外的 DOM 节点渲染组件的方法。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0-child-%E6%98%AF%E5%8F%AF%E6%B8%B2%E6%9F%93%E7%9A%84-react-%E5%AD%90%E9%A1%B9%EF%BC%8C%E6%AF%94%E5%A6%82%E5%85%83%E7%B4%A0%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96%E8%80%85%E7%89%87%E6%AE%B5%E7%AD%89%E3%80%82%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0-container-%E6%98%AF%E4%B8%80%E4%B8%AA-DOM-%E5%85%83%E7%B4%A0%E3%80%82\"><span class=\"toc-text\">第一个参数 child 是可渲染的 react 子项，比如元素，字符串或者片段等。第二个参数 container 是一个 DOM 元素。</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E6%97%A7%E7%89%88\"><span class=\"toc-text\">3、组件的生命周期(旧版)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%8F%90%EF%BC%9A%E5%8F%AA%E6%9C%89%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%89%8D%E6%9C%89%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%81\"><span class=\"toc-text\">前提：只有类组件才有生命周期！</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">一、挂载阶段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#constructor%E5%B0%B1%E6%98%AF-react-%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%8Cconstructor-%E6%98%AF%E7%BB%84%E4%BB%B6%E8%A2%AB%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E8%B0%83%E7%94%A8%EF%BC%8C%E5%8F%AA%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1\"><span class=\"toc-text\">constructor就是 react 的第一个生命周期，constructor 是组件被实例化的时候就调用，只调用一次</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#componentWillMount-%E5%B0%86%E8%A2%AB%E5%BC%83%E7%94%A8\"><span class=\"toc-text\">componentWillMount      将被弃用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%A4%BA%E6%8C%82%E8%BD%BD%E5%89%8D-%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%BA%9F%E5%BC%83%E4%BA%86-%E6%B2%A1%E5%95%A5%E7%94%A8%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%81%9A%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82-%E5%9B%A0%E4%B8%BA-fiber-16-%E7%89%88%E6%9C%AC-%E7%AE%97%E6%B3%95%E7%9A%84%E5%AD%98%E5%9C%A8%EF%BC%8C%E6%9C%89%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E8%AF%B7%E6%B1%82%E5%81%9A%E5%A4%9A%E6%AC%A1%EF%BC%8C%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">表示挂载前,已经被废弃了,没啥用，不能做数据请求, 因为 fiber(16 版本)算法的存在，有可能导致请求做多次，影响性能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#render-%EF%BC%9Arender-%E4%B9%9F%E6%98%AF%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%8C%E5%AE%83%E5%BF%85%E9%A1%BB%E8%A6%81%E8%BF%94%E5%9B%9E-jsx-%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%81%9A%E8%A7%A3%E6%9E%84%E4%BB%A5%E5%8F%8A%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86-%E4%B8%8D%E8%A6%81%E5%9C%A8-render-%E5%81%9A%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">render ：render 也是生命周期，它必须要返回 jsx, 页面显示的内容，可以做解构以及对数据的处理, 不要在 render 做数据请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%A4%BA%E6%8C%82%E8%BD%BD%E7%BB%93%E6%9D%9F-%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%BB%E6%84%8F%E7%9A%84%E4%BA%8B%E6%83%85%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">表示挂载结束,可以做任意的事情，包括数据请求</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">二、更新阶段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%8D%B8%E8%BD%BD%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">三、卸载阶段</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E6%96%B0%E7%89%88-16-3-%E4%B9%8B%E5%90%8E\"><span class=\"toc-text\">4、组件的生命周期(新版 16.3 之后)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ES6新增详解","uid":"0b7869d8948a44428f2ef3d011726b80","slug":"ES６新增详解","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T05:52:10.799Z","comments":true,"path":"api/articles/ES６新增详解.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10002.jpeg","text":"ES6 新增详解let 声明变量和 const 声明常量，两个都有块级作用域ES5中是没有块级作用域的，并且var有变量提升，在let中，使用的变量一定要进行声明 箭头函数ES6中的函数定义不再使用关键字function()，而是利用了()&#x3D;&gt;来进行定义 特点：箭...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"web前端","slug":"web前端","count":3,"path":"api/categories/web前端.json"}],"tags":[{"name":"ES6笔记","slug":"ES6笔记","count":2,"path":"api/tags/ES6笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"React小记【Router V6】","uid":"e104371ef5567a01c59c8cbd7ed22e5b","slug":"React学习总结( 五 ) 【 路由V6系列】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:35.309Z","comments":true,"path":"api/articles/React学习总结( 五 ) 【 路由V6系列】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq9.jpg","text":"React 学习总结( 五 ) 【 路由 V6 系列】 react-router-dom(路由 v6 版本) 新旧版本区别:一、注册路由的时候 v5 的 Switch 改为了 Routes import &#123;Route, Routes &#125; from 'react...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}