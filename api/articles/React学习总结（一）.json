{"title":"React小记（一）","uid":"0b9255324d1752fc31147db2449c0610","slug":"React学习总结（一）","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:56.397Z","comments":true,"path":"api/articles/React学习总结（一）.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gqj2.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"React-学习总结（一）\"><a href=\"#React-学习总结（一）\" class=\"headerlink\" title=\"React 学习总结（一）\"></a>React 学习总结（一）</h1><h1 id=\"1、组件中的-DOM-样式\"><a href=\"#1、组件中的-DOM-样式\" class=\"headerlink\" title=\"1、组件中的 DOM 样式\"></a>1、组件中的 DOM 样式</h1><hr>\n<h3 id=\"第一种：行内样式\"><a href=\"#第一种：行内样式\" class=\"headerlink\" title=\"第一种：行内样式\"></a>第一种：行内样式</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，第二个是对象的括号\n &lt;p style=&#123;&#123;color:'red', fontSize:'14px'&#125;&#125;>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"第二种：class-样式引入\"><a href=\"#第二种：class-样式引入\" class=\"headerlink\" title=\"第二种：class 样式引入\"></a>第二种：class 样式引入</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">import \"./02-style.css\";//引入写好的样式\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>class添加样式<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n&#123;/* class属性，要写成className */&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>abc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>hello react!!!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第三种：styled-components\"><a href=\"#第三种：styled-components\" class=\"headerlink\" title=\"第三种：styled-components\"></a>第三种：styled-components</h3><p><strong><code>styled-components</code>是针对 React 写的一套 css-in-js 框架，简单来讲就是在 js 中写 css。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BlueBig <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>p<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: blue;\n  /* font-size: 50px; */\n  font-size: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px; //可进行处理\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"第四种：classnames【不同的条件添加不同的样式】\"><a href=\"#第四种：classnames【不同的条件添加不同的样式】\" class=\"headerlink\" title=\"第四种：classnames【不同的条件添加不同的样式】\"></a>第四种：<strong>classnames</strong>【不同的条件添加不同的样式】</h3><p>有时候需要根据不同的条件添加不同的样式，比如：完成状态，完成是绿色，未完成是红色。那么这种情况下，我们推荐使用<a href=\"https://www.npmjs.com/package/classnames\">classnames</a>这个包：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//! 引入classNames，用于不同的条件添加不同的样式</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">\"classnames/bind\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./03-style.css\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// key表示类名，value表示变量或者表达式</span>\n    <span class=\"token literal-property property\">green</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>num <span class=\"token operator\">===</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">red</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>num <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">big</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// &lt;div className=&#123;props.num === \"1\" ? \"green\" : \"red\"&#125;></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>className<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>hello react<span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"2、受控组件和非受控组件\"><a href=\"#2、受控组件和非受控组件\" class=\"headerlink\" title=\"2、受控组件和非受控组件\"></a>2、受控组件和非受控组件</h1><hr>\n<p><strong>受控组件：</strong>如果将<code>React</code>里的<code>state</code>属性和表单元素的值建立依赖关系，再通过<code>onChange</code>事件与<code>setState()</code>结合更新<code>state</code>属性，就能达到控制用户输入过程中表单发生的操作。被<code>React</code>以这种方式控制取值的表单输入元素就叫做<strong>受控组件</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>form表单<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>textVlaue<span class=\"token punctuation\">&#125;</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange1<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>textarea\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>areaValue<span class=\"token punctuation\">&#125;</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange2<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>textarea<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>select value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>selectValue<span class=\"token punctuation\">&#125;</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange3<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> disabled<span class=\"token operator\">></span><span class=\"token comment\">//disabled 不能被选择</span>\n            <span class=\"token operator\">--</span> 请选择 <span class=\"token operator\">--</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token operator\">></span>男<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">></span>女<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token operator\">></span>未知<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        我已阅读<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\n          checked<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">&#125;</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange4<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>非受控组件：</strong><code>input</code>标签它实际也是一个<code>DOM</code>元素，我们可以用获取<code>DOM</code>元素信息的方式来获取表单元素的值呢？也就是<a href=\"https://link.zhihu.com/?target=https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">使用 ref</a> 来从 DOM 节点中获取表单数据。【有三种获取 DOM 节点的写法】</p>\n<p>关键代码：<font color='Peach'> ipt = createRef();<br>　　　　　 this.ipt.current 获取 DOM 元素</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component<span class=\"token punctuation\">,</span> createRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//todo createRef用来做非受控组件的</span>\n <span class=\"token comment\">//todo createRef()返回的是一个地址引用</span>\n  ipt <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// console.log(this.ipt.current);是input标签</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ipt<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取表单的值</span>\n  <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 非受控组件的初始值要用defaultValue */</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ipt<span class=\"token punctuation\">&#125;</span> defaultValue<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// 箭头函数的写法获取input标签 (工作中用的多)</span>\n     <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>inputDom<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">//直接在实例中结构,就可以获取input标签了</span>\n     <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentNode</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">&#125;</span> defaultValue<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token comment\">//要被废弃的一种,字符串形式ref打标识, 实例属性refs来收集,键值对形式</span>\n     <span class=\"token operator\">/</span>   <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>input1<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs 获取input1标签\n     <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ref<span class=\"token operator\">=</span><span class=\"token string\">'input1'</span> defaultValue<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"3、setState\"><a href=\"#3、setState\" class=\"headerlink\" title=\"3、setState\"></a>3、setState</h1><hr>\n<p><strong>接受一个对象的形式</strong>：如果改变后的值不需要依赖上一次的值，最好用对象，更加方便</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//todo 可以接收第一个参数是对象，第二个参数是回调函数，在改变结束以后调用</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>setState 是可以接收一个函数, 第二个参数是回调函数</strong>：如果改变后的值需要依赖上一次的值，最好用函数，更加安全</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n     <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState，props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//可以接收上一个数据和props值</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"4、状态提升（将公用数据放在父组件）\"><a href=\"#4、状态提升（将公用数据放在父组件）\" class=\"headerlink\" title=\"4、状态提升（将公用数据放在父组件）\"></a>4、状态提升（将公用数据放在父组件）</h1><hr>\n<p><strong>理解：</strong><code>React的状态提升就是用户对子组件操作，子组件不改变自己的状态，通过自己的props把这个操作改变的数据传递给父组件，改变父组件的状态，从而改变受父组件控制的所有子组件的状态，这也是React单项数据流的特性决定的</code>。</p>\n<hr>\n<p><font color='Rhodamine'><strong>官方的原话是</strong>：共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>状态提升 <span class=\"token operator\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Child1 onGetCount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> 数据方法都放在父组件，子组件调用即\n        可使用\n        <span class=\"token operator\">&lt;</span>Child2 count<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"5、this-的指向问题\"><a href=\"#5、this-的指向问题\" class=\"headerlink\" title=\"5、this 的指向问题\"></a>5、this 的指向问题</h1><hr>\n<p>1、<font color=\"red\">内联地使用 bind, 不是很推荐，bind 会产生新函数，会增加内存消耗</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2、<font color='each'>在 constructor 里面调用 this.xxx = this.xxx.bind(this); 比较推荐</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3、<font color='Peach'>箭头函数，箭头函数的 this 指向外层, 推荐</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"6、事件传参问题\"><a href=\"#6、事件传参问题\" class=\"headerlink\" title=\"6、事件传参问题\"></a>6、事件传参问题</h1><hr>\n<p>1、<font color=\"red\">使用内联的 bind(this, xxx), bind 会产生新函数，新函数不会自动调用，并且 bind 的第二个参数会作为新函数的第一个参数, 不推荐，会增加内存</font></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">remove <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// e 参数是event</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//事件</span>\n <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、<font color='each'>使用内联的箭头函数，多套了一层，触发外层，里层自动执行, 不是特别推荐，因为会产生新函数增加内存, <strong>但是这是项目里面用的最多的方式</strong></font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> e 参数是event\n<span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//事件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3、<font color='Peach'> 柯里化函数，外层自动调用，里层点击后调用, 最推荐的方式</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//阻止事件冒泡</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e 为event</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"7、createContext-【跨组件通信】\"><a href=\"#7、createContext-【跨组件通信】\" class=\"headerlink\" title=\"7、createContext 【跨组件通信】\"></a>7、createContext 【跨组件通信】</h1><hr>\n<p>关键代码：<font color='Peach'>{ Provider, Consumer } = createContext()</font></p>\n<p><font color='each'>在 react 没有类似 vue 中的事件总线来解决这个问题，我们只能借助它们共同的父级组件来实现，将非父子关系装换成多维度的父子关系。react 提供了<code>context</code> api 来实现跨组件通信, React 16.3 之后的<code>context</code>api 较之前的好用。</font></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo 引入createContext，用于跨组件通信</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Component<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo 执行以后会返回context对象</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo  提供者    消费者 export暴露组件，可以给需要的组件用</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> Provider<span class=\"token punctuation\">,</span> Consumer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo Provider使用的时候需要又一个属性value，包在父级的&lt;>&lt;/></span>\n<span class=\"token operator\">&lt;</span>Provider\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Child <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo Consumer里面需要写一个函数，函数可以接收一个value参数，需要返回jsx</span>\n<span class=\"token comment\">// todo import后面的解构用as取别名，普通对象用冒号取别名</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Consumer <span class=\"token keyword\">as</span> Abc <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  child组件 <span class=\"token operator\">-</span>\n  <span class=\"token operator\">&lt;</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//可以用别名，Abc</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><p><font color='Peach'>1.父组件将自己的状态传递给子组件，子组件当做属性来接收，当父组件更改自己状态的时候，子组件接收到的属性就会发生改变</font></p>\n<p><font color='orange'>2.父组件利用<code>ref</code>对子组件做标记，通过调用子组件的方法以更改子组件的状态,也可以调用子组件的方法..</font></p>\n<p><strong>子组件与父组件通信</strong></p>\n<p><font color='Salmon '><strong>父组件将自己的某个方法传递给子组件，在方法里可以做任意操作，比如可以更改状态，子组件通过<code>this.props</code>接收到父组件的方法后调用</strong></font></p>\n<h2 id=\"——–未完待续———\"><a href=\"#——–未完待续———\" class=\"headerlink\" title=\"——–未完待续———-\"></a>——–未完待续———-</h2>","text":"React 学习总结（一）1、组件中的 DOM 样式 第一种：行内样式// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，第二个是对象的括号 &lt;p style=&#123;&#123;color:'red', fontSize:'14px'&#125;&#125...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89\"><span class=\"toc-text\">React 学习总结（一）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84-DOM-%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">1、组件中的 DOM 样式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D%EF%BC%9A%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">第一种：行内样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D%EF%BC%9Aclass-%E6%A0%B7%E5%BC%8F%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">第二种：class 样式引入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D%EF%BC%9Astyled-components\"><span class=\"toc-text\">第三种：styled-components</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%A7%8D%EF%BC%9Aclassnames%E3%80%90%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%B7%BB%E5%8A%A0%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%B7%E5%BC%8F%E3%80%91\"><span class=\"toc-text\">第四种：classnames【不同的条件添加不同的样式】</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2、受控组件和非受控组件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81setState\"><span class=\"toc-text\">3、setState</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87%EF%BC%88%E5%B0%86%E5%85%AC%E7%94%A8%E6%95%B0%E6%8D%AE%E6%94%BE%E5%9C%A8%E7%88%B6%E7%BB%84%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">4、状态提升（将公用数据放在父组件）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81this-%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5、this 的指向问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">6、事件传参问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7%E3%80%81createContext-%E3%80%90%E8%B7%A8%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E3%80%91\"><span class=\"toc-text\">7、createContext 【跨组件通信】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">父子组件通信</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94%E2%80%94%E2%80%93%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD%E2%80%94%E2%80%94%E2%80%94\"><span class=\"toc-text\">——–未完待续———-</span></a></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React小记（二）","uid":"343c996ed04fbebbae1554517bbe60b6","slug":"React学习总结( 二 )","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:48:20.644Z","comments":true,"path":"api/articles/React学习总结( 二 ).json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq2.jpeg","text":"React 学习总结( 二 )1、HOC(高阶组件) Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。作用：可以给组件添加相同的结构,添加相同的属性等等,增强组件的功能，以及进行复用 温馨提示：一般用 with xxx.js 单独...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"React小记【Router V6】","uid":"e104371ef5567a01c59c8cbd7ed22e5b","slug":"React学习总结( 五 ) 【 路由V6系列】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:35.309Z","comments":true,"path":"api/articles/React学习总结( 五 ) 【 路由V6系列】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq9.jpg","text":"React 学习总结( 五 ) 【 路由 V6 系列】 react-router-dom(路由 v6 版本) 新旧版本区别:一、注册路由的时候 v5 的 Switch 改为了 Routes import &#123;Route, Routes &#125; from 'react...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}