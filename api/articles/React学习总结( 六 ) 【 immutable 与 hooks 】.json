{"title":"React小记【immutable与hooks】","uid":"7b3e4977044b53ba020eff72809f2f12","slug":"React学习总结( 六 ) 【 immutable 与 hooks 】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:48:38.376Z","comments":true,"path":"api/articles/React学习总结( 六 ) 【 immutable 与 hooks 】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gqj5.jpg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"React-学习总结-六-【-immutable-与-hooks-】\"><a href=\"#React-学习总结-六-【-immutable-与-hooks-】\" class=\"headerlink\" title=\"React 学习总结( 六 ) 【 immutable 与 hooks 】\"></a><strong>React 学习总结( 六 ) 【 immutable 与 hooks 】</strong></h1><hr>\n<h1 id=\"immutable\"><a href=\"#immutable\" class=\"headerlink\" title=\"immutable\"></a><strong>immutable</strong></h1><hr>\n<h4 id=\"一、什么是-immutable？\"><a href=\"#一、什么是-immutable？\" class=\"headerlink\" title=\"一、什么是 immutable？\"></a>一、什么是 immutable？</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">immutable，译为<span class=\"token string\">\"不可改变的\"</span>，是一种持久化数据。它有一旦被创建就不会被修改的特性。\n当你修改 immutable 对象的时候返回新的 immutable。但是原数据不会改变。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"二、为什么要使用-immutable？\"><a href=\"#二、为什么要使用-immutable？\" class=\"headerlink\" title=\"二、为什么要使用 immutable？\"></a>二、为什么要使用 immutable？</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//   用处可大了。进行 js 对象的深拷贝对性能的消耗太大时（使用了递归），例如 Redux 中的深拷贝，就需要用到 immutable 来提升性能，从而避免牵一发而动全身。</span>\n<span class=\"token comment\">//   当你使用 immutable 后再进行深拷贝的时候，只会拷贝你改变的节点，从而达到了节省性能的目的。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><font color='Salmon '><strong>总结：immutable 的不可变性让纯函数更强大，每次都返回新的 immutable 的特性让程序员可以对其进行链式操作，用起来更方便</strong></font></p>\n<h4 id=\"三、immutable-的简单实用\"><a href=\"#三、immutable-的简单实用\" class=\"headerlink\" title=\"三、immutable 的简单实用\"></a>三、immutable 的简单实用</h4><ul>\n<li><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">安装： npm i immutable <span class=\"token operator\">-</span><span class=\"token constant\">S</span>  <span class=\"token comment\">// yarn add immutable</span>\n<span class=\"token comment\">// 使用时解构方法</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Map<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">,</span> Seq<span class=\"token punctuation\">,</span> fromJS<span class=\"token punctuation\">,</span> Range <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutable\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><h4 id=\"Map-数据结构\"><a href=\"#Map-数据结构\" class=\"headerlink\" title=\"Map 数据结构\"></a>Map 数据结构</h4><p><strong>immutable.Map()<strong>：创建一个类似于 js 中的对象的</strong>Map 对象</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> immutable<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map &#123; \"name\":\"Apple\", \"age\":19, \"sex\":\"男\" &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>操作 Map：</strong></p>\n<ol>\n<li><p>map.set 【增加数据】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> map1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"呜呜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map &#123; \"name\":\"Apple\", \"age\":19, \"sex\":\"男\", \"sign\":\"呜呜\" &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>map.setIn 【setIn 可以深层操作，第一个参数是个数组，数组中第一个元素是操作的对象的 key 值，第二个元素是 value 值】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> map1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">setIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 深层的set</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map &#123; \"name\":\"Apple\", \"age\":19, \"sex\":\"男\", \"obj\":&#123; \"xxx\":\"xxx\" &#125; &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>map.delete &amp;&amp; map.deleteIn【删除】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 a 的值</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">deleteIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 a 中 b 的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>改</p>\n<p>map.update()</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">参数1：需要更新的值\n参数2：回调函数，返回一个更新后的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>map.updateIn() 深层更新</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">参数1：一个数组，第一个元素是父元素，第二个元素为目标子元素\n参数2：回调函数，参数为目标值的值，返回值为一个更新后的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> map1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> map2 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">updateIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>map.get() 【 查取值】 【 返回的不是 immutable 对象了 而是里边定义的正常值 】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:1&#125; 得到1。</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">getIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:&#123;b:2&#125;&#125; 得到2。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n</li>\n<li><h4 id=\"List-数据结构：\"><a href=\"#List-数据结构：\" class=\"headerlink\" title=\"List 数据结构：\"></a>List 数据结构：</h4><p><strong>immutable.List()<strong>：创建一个类似于 js 中的数组的</strong>List 对象</strong></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">  &#x2F;&#x2F; 创建immutable数组\n  const list1 &#x3D; List([1, 2]); &#x2F;&#x2F; 创建\n  const list2 &#x3D; list1.push(3, 4, 5);  &#x2F;&#x2F; 增加\n  const list3 &#x3D; list2.unshift(0); &#x2F;&#x2F;向前增加\n  const list4 &#x3D; list1.concat(list2, list3); &#x2F;&#x2F; 合并\n  console.log(list1.size &#x3D;&#x3D;&#x3D; 2);\n  console.log(list2.size &#x3D;&#x3D;&#x3D; 5);\n  console.log(list3.size &#x3D;&#x3D;&#x3D; 6);\n  console.log(list4.size &#x3D;&#x3D;&#x3D; 13);\n&#x2F;&#x2F; 删\nlist.splice(1,1)\n&#x2F;&#x2F; 改\nlist.splice(1,1,10)\n&#x2F;&#x2F; 查\nlist.getIn([0])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><p>**merge()**：合并 map 对象</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let newMap &#x3D; map.merge(map1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**toObject()**：immutable 的 map 对象转 JS 对象</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">浅转换，只转换最外层<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**toArray()**：immutable 的 list 对象转 JS 数组</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">浅转换，只转换最外层<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**toJS()**：immutable 的 map 对象/list 对象 转 JS 对象/JS 数组</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">深转换，全部转换，更耗费性能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**Map()**：JS 对象或数组转换成 immutable</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">浅转换，只转换最外层<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**fromJS()**：JS 对象/JS 数组 转换成 immutable</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">深转换，全部转换，更耗费性能。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>Seq():既可以生成 immutable 对象，也可以生成 immutable 数组,是有惰性的(可以从结果出发)</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> oddSquares <span class=\"token operator\">=</span> <span class=\"token function\">Seq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filter x:\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map x:\"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oddSquares<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> aRange <span class=\"token operator\">=</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 滑块</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 略过</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r <span class=\"token operator\">*</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aRange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>immutable<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"range\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"hooks-【重点】\"><a href=\"#hooks-【重点】\" class=\"headerlink\" title=\"hooks 【重点】\"></a><strong>hooks 【重点】</strong></h1><hr>\n<h4 id=\"useState-【让函数组件可以定义自己的-state】\"><a href=\"#useState-【让函数组件可以定义自己的-state】\" class=\"headerlink\" title=\"useState 【让函数组件可以定义自己的 state】\"></a>useState 【让函数组件可以定义自己的 state】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo hooks只能给函数组件用</span>\n<span class=\"token comment\">// todo hooks可以在不增加组件树层级的情况下增加组件功能</span>\n<span class=\"token comment\">// todo hooks可以增加代码可读性，将功能代码聚合，方便阅读维护</span>\n<span class=\"token comment\">// todo hooks只能在函数组件的顶层调用</span>\n\n<span class=\"token comment\">// todo useState是让函数组件可以定义自己的state</span>\n<span class=\"token comment\">// todo useState调用会返回一个数组, 分别是变量和改变变量的方法</span>\n<span class=\"token comment\">// todo useState需要接收一个参数，是变量的初始值</span>\n<span class=\"token comment\">// todo useState改变数据是异步的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useEffect-噎-faiKs-【用于处理副作用，代替生命周期】\"><a href=\"#useEffect-噎-faiKs-【用于处理副作用，代替生命周期】\" class=\"headerlink\" title=\"useEffect [ 噎 faiKs ]【用于处理副作用，代替生命周期】\"></a>useEffect [ 噎 faiKs ]【用于处理副作用，代替生命周期】</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// todo useEffect没有返回值，里面需要传入一个函数作为参数</span>\n<span class=\"token comment\">// todo 如果useEffect里面只传入了一个函数，相当于类组件的componentDidMount和componentDidUpdate</span>\n<span class=\"token comment\">// todo useEffect还可以接收第二个参数，是一个数组（依赖数组）</span>\n<span class=\"token comment\">// todo 如果第二个参数是空数组，相当于类组件的componentDidMount</span>\n<span class=\"token comment\">// todo 如果第二个参数有内容，相当于vue的watch</span>\n<span class=\"token comment\">// todo 如果第一个函数参数里面返回一个函数，相当于类组件的componentWillUnmount</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useLayoutEffect-【跟-useEffect-类似，-同步执行副作用】\"><a href=\"#useLayoutEffect-【跟-useEffect-类似，-同步执行副作用】\" class=\"headerlink\" title=\"useLayoutEffect 【跟 useEffect 类似， 同步执行副作用】\"></a>useLayoutEffect 【跟 useEffect 类似， 同步执行副作用】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useLayoutEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo useLayoutEffect跟useEffect类似的，会在componentDidMount和componentDidUpdate之后同步调用,会阻塞代码执行, 优先于useEffect执行</span>\n<span class=\"token comment\">// todo 只有当加载完毕以后需要改变dom样式的时候用，可以避免页面抖动</span>\n<span class=\"token comment\">// todo 绝大部分情况下，推荐使用useEffect</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"memo-【高阶组件，给函数组件用的，作用和-PureComponent-完全相同】\"><a href=\"#memo-【高阶组件，给函数组件用的，作用和-PureComponent-完全相同】\" class=\"headerlink\" title=\"memo 【高阶组件，给函数组件用的，作用和 PureComponent 完全相同】\"></a>memo 【高阶组件，给函数组件用的，作用和 PureComponent 完全相同】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> memo <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>child组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useCallback-【用于缓存函数】-【一般用在自定义事件】\"><a href=\"#useCallback-【用于缓存函数】-【一般用在自定义事件】\" class=\"headerlink\" title=\"useCallback 【用于缓存函数】 【一般用在自定义事件】\"></a>useCallback 【用于缓存函数】 【一般用在自定义事件】</h4><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F; todo 第一个参数是需要被缓存的函数，第二个参数是一个依赖数组\n\n&#x2F;&#x2F; todo 当有函数要作为自定义事件的时候，这个函数就需要加useCallback\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useMemo-【当作-vue-的计算属性去理解，缓存的是函数的返回值】\"><a href=\"#useMemo-【当作-vue-的计算属性去理解，缓存的是函数的返回值】\" class=\"headerlink\" title=\"useMemo 【当作 vue 的计算属性去理解，缓存的是函数的返回值】\"></a>useMemo 【当作 vue 的计算属性去理解，缓存的是函数的返回值】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> oddArr <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useCallback-与-useMemo-区别\"><a href=\"#useCallback-与-useMemo-区别\" class=\"headerlink\" title=\"useCallback 与 useMemo 区别\"></a>useCallback 与 useMemo 区别</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">' useCallback和useMemo的区别\n<span class=\"token comment\">// todo useCallback是真正的缓存函数</span>\n<span class=\"token comment\">// todo useMemo缓存的是函数的返回值</span>\n' useCallback和useMemo能否相互转换\n<span class=\"token comment\">// todo 只有useCallback可以写成useMemo，将之前的函数当作返回值，柯里化函数</span>\n <span class=\"token keyword\">const</span> fn2 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useContext-【代替-Consumer-的作用】\"><a href=\"#useContext-【代替-Consumer-的作用】\" class=\"headerlink\" title=\"useContext 【代替 Consumer 的作用】\"></a>useContext 【代替 Consumer 的作用】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> createContext<span class=\"token punctuation\">,</span> useContext <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todo useContext只能代替Consumer的作用</span>\n<span class=\"token comment\">// todo 里面需要传入context对象, 返回value对象</span>\n\n<span class=\"token keyword\">const</span> context1 <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> context2 <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Child2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>context1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入context对象, 返回value对象 name</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> nick <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>context2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入context对象, 返回value对象 nick</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      child2组件 <span class=\"token operator\">-</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">&#123;</span>nick<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* &lt;context1.Consumer>\n        &#123;(value) => (\n          &lt;span>\n            &#123;value.name&#125; -&#123;\" \"&#125;\n            &lt;context2.Consumer>\n              &#123;(val) => &lt;span>&#123;val.nick&#125;&lt;/span>&#125;\n            &lt;/context2.Consumer>\n          &lt;/span>\n        )&#125;\n      &lt;/context1.Consumer> */</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useReducer-【redux-的阉割版，只能做同步】【返回数组】\"><a href=\"#useReducer-【redux-的阉割版，只能做同步】【返回数组】\" class=\"headerlink\" title=\"useReducer 【redux 的阉割版，只能做同步】【返回数组】\"></a>useReducer 【redux 的阉割版，只能做同步】【返回数组】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useReducer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"add\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"minus\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// todo useReducer需要传入两个参数</span>\n  <span class=\"token comment\">// todo 返回值是一个数组</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> defaultState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>useReducer<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>btn<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useRef-【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】\"><a href=\"#useRef-【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】\" class=\"headerlink\" title=\"useRef 【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】\"></a>useRef 【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// todo 还可以用useRef来定义变量，可以绕过捕获值的特性</span>\n<span class=\"token comment\">// todo 用useRef定义的变量是没有响应式</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showCount<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>增加 count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>减少 count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"useImperativeHandle-【用于让父组件获取子组件内的索引】\"><a href=\"#useImperativeHandle-【用于让父组件获取子组件内的索引】\" class=\"headerlink\" title=\"useImperativeHandle 【用于让父组件获取子组件内的索引】\"></a>useImperativeHandle 【用于让父组件获取子组件内的索引】</h4><h4 id=\"forwardRef-【创建一个-React-组件-可以把上级-ref-转发-传递-给下级组件-继而可以在上级组件中获取下级目标】\"><a href=\"#forwardRef-【创建一个-React-组件-可以把上级-ref-转发-传递-给下级组件-继而可以在上级组件中获取下级目标】\" class=\"headerlink\" title=\"forwardRef() 【创建一个 React 组件, 可以把上级 ref 转发(传递) 给下级组件, 继而可以在上级组件中获取下级目标】\"></a>forwardRef() 【创建一个 React 组件, 可以把上级 ref 转发(传递) 给下级组件, 继而可以在上级组件中获取下级目标】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  useRef<span class=\"token punctuation\">,</span>\n  useEffect<span class=\"token punctuation\">,</span>\n  useImperativeHandle<span class=\"token punctuation\">,</span>\n  forwardRef<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildInputComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"child input\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> ChildInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>ChildInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转发ref 节点</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子组件的Input框聚焦了</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ChildInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"自定义-hooks-【类似模块化开发，将可以复用的功能方法放在外面】-【相同功能的代码放到了一起，方便阅读和维护】\"><a href=\"#自定义-hooks-【类似模块化开发，将可以复用的功能方法放在外面】-【相同功能的代码放到了一起，方便阅读和维护】\" class=\"headerlink\" title=\"自定义 hooks 【类似模块化开发，将可以复用的功能方法放在外面】 【相同功能的代码放到了一起，方便阅读和维护】\"></a>自定义 hooks 【类似模块化开发，将可以复用的功能方法放在外面】 【相同功能的代码放到了一起，方便阅读和维护】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> fn1<span class=\"token punctuation\">,</span> fn2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 组件需要啥就输出啥</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useCounter<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">React</span> from <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">useCounter</span> from <span class=\"token string\">\"./utils/useCounter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// todo 自定义hooks</span>\n<span class=\"token comment\">// todo 相同功能的代码放到了一起，方便阅读和维护</span>\n<span class=\"token comment\">// todo 可以复用</span>\n\n<span class=\"token comment\">// todo 显示当前事件 / 文件上传功能 / 倒计时</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> fn1<span class=\"token punctuation\">,</span> fn2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">></span></span>自定义hooks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fn1<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>span<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fn2<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">></span></span>当前事件为<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>nowTime<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nexport <span class=\"token keyword\">default</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n","text":"React 学习总结( 六 ) 【 immutable 与 hooks 】 immutable 一、什么是 immutable？immutable，译为\"不可改变的\"，是一种持久化数据。它有一旦被创建就不会被修改的特性。 当你修改 immutable 对象的时候返回新的 immu...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%E5%85%AD-%E3%80%90-immutable-%E4%B8%8E-hooks-%E3%80%91\"><span class=\"toc-text\">React 学习总结( 六 ) 【 immutable 与 hooks 】</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#immutable\"><span class=\"toc-text\">immutable</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-immutable%EF%BC%9F\"><span class=\"toc-text\">一、什么是 immutable？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-immutable%EF%BC%9F\"><span class=\"toc-text\">二、为什么要使用 immutable？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81immutable-%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8\"><span class=\"toc-text\">三、immutable 的简单实用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Map 数据结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#List-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">List 数据结构：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#API\"><span class=\"toc-text\">API</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#hooks-%E3%80%90%E9%87%8D%E7%82%B9%E3%80%91\"><span class=\"toc-text\">hooks 【重点】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useState-%E3%80%90%E8%AE%A9%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%8F%AF%E4%BB%A5%E5%AE%9A%E4%B9%89%E8%87%AA%E5%B7%B1%E7%9A%84-state%E3%80%91\"><span class=\"toc-text\">useState 【让函数组件可以定义自己的 state】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useEffect-%E5%99%8E-faiKs-%E3%80%90%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86%E5%89%AF%E4%BD%9C%E7%94%A8%EF%BC%8C%E4%BB%A3%E6%9B%BF%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%91\"><span class=\"toc-text\">useEffect [ 噎 faiKs ]【用于处理副作用，代替生命周期】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useLayoutEffect-%E3%80%90%E8%B7%9F-useEffect-%E7%B1%BB%E4%BC%BC%EF%BC%8C-%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%E5%89%AF%E4%BD%9C%E7%94%A8%E3%80%91\"><span class=\"toc-text\">useLayoutEffect 【跟 useEffect 类似， 同步执行副作用】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#memo-%E3%80%90%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%EF%BC%8C%E7%BB%99%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E7%94%A8%E7%9A%84%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%92%8C-PureComponent-%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%E3%80%91\"><span class=\"toc-text\">memo 【高阶组件，给函数组件用的，作用和 PureComponent 完全相同】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useCallback-%E3%80%90%E7%94%A8%E4%BA%8E%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0%E3%80%91-%E3%80%90%E4%B8%80%E8%88%AC%E7%94%A8%E5%9C%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E3%80%91\"><span class=\"toc-text\">useCallback 【用于缓存函数】 【一般用在自定义事件】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useMemo-%E3%80%90%E5%BD%93%E4%BD%9C-vue-%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%8E%BB%E7%90%86%E8%A7%A3%EF%BC%8C%E7%BC%93%E5%AD%98%E7%9A%84%E6%98%AF%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%91\"><span class=\"toc-text\">useMemo 【当作 vue 的计算属性去理解，缓存的是函数的返回值】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useCallback-%E4%B8%8E-useMemo-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">useCallback 与 useMemo 区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useContext-%E3%80%90%E4%BB%A3%E6%9B%BF-Consumer-%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%91\"><span class=\"toc-text\">useContext 【代替 Consumer 的作用】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useReducer-%E3%80%90redux-%E7%9A%84%E9%98%89%E5%89%B2%E7%89%88%EF%BC%8C%E5%8F%AA%E8%83%BD%E5%81%9A%E5%90%8C%E6%AD%A5%E3%80%91%E3%80%90%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E3%80%91\"><span class=\"toc-text\">useReducer 【redux 的阉割版，只能做同步】【返回数组】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useRef-%E3%80%90%E6%9D%A5%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%BB%95%E8%BF%87%E6%8D%95%E8%8E%B7%E5%80%BC%E7%9A%84%E7%89%B9%E6%80%A7%E3%80%91%E3%80%90%E5%8F%98%E9%87%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%91\"><span class=\"toc-text\">useRef 【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#useImperativeHandle-%E3%80%90%E7%94%A8%E4%BA%8E%E8%AE%A9%E7%88%B6%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E5%AD%90%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E7%B4%A2%E5%BC%95%E3%80%91\"><span class=\"toc-text\">useImperativeHandle 【用于让父组件获取子组件内的索引】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#forwardRef-%E3%80%90%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-React-%E7%BB%84%E4%BB%B6-%E5%8F%AF%E4%BB%A5%E6%8A%8A%E4%B8%8A%E7%BA%A7-ref-%E8%BD%AC%E5%8F%91-%E4%BC%A0%E9%80%92-%E7%BB%99%E4%B8%8B%E7%BA%A7%E7%BB%84%E4%BB%B6-%E7%BB%A7%E8%80%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%B8%8A%E7%BA%A7%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%B8%8B%E7%BA%A7%E7%9B%AE%E6%A0%87%E3%80%91\"><span class=\"toc-text\">forwardRef() 【创建一个 React 组件, 可以把上级 ref 转发(传递) 给下级组件, 继而可以在上级组件中获取下级目标】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E3%80%90%E7%B1%BB%E4%BC%BC%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%8C%E5%B0%86%E5%8F%AF%E4%BB%A5%E5%A4%8D%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95%E6%94%BE%E5%9C%A8%E5%A4%96%E9%9D%A2%E3%80%91-%E3%80%90%E7%9B%B8%E5%90%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BB%A3%E7%A0%81%E6%94%BE%E5%88%B0%E4%BA%86%E4%B8%80%E8%B5%B7%EF%BC%8C%E6%96%B9%E4%BE%BF%E9%98%85%E8%AF%BB%E5%92%8C%E7%BB%B4%E6%8A%A4%E3%80%91\"><span class=\"toc-text\">自定义 hooks 【类似模块化开发，将可以复用的功能方法放在外面】 【相同功能的代码放到了一起，方便阅读和维护】</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React小记【Router V6】","uid":"e104371ef5567a01c59c8cbd7ed22e5b","slug":"React学习总结( 五 ) 【 路由V6系列】","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:35.309Z","comments":true,"path":"api/articles/React学习总结( 五 ) 【 路由V6系列】.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gq9.jpg","text":"React 学习总结( 五 ) 【 路由 V6 系列】 react-router-dom(路由 v6 版本) 新旧版本区别:一、注册路由的时候 v5 的 Switch 改为了 Routes import &#123;Route, Routes &#125; from 'react...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"React小记（一）","uid":"0b9255324d1752fc31147db2449c0610","slug":"React学习总结（一）","date":"2022-12-26T13:14:11.604Z","updated":"2023-02-01T06:49:56.397Z","comments":true,"path":"api/articles/React学习总结（一）.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/gqj2.jpg","text":"React 学习总结（一）1、组件中的 DOM 样式 第一种：行内样式// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，第二个是对象的括号 &lt;p style=&#123;&#123;color:'red', fontSize:'14px'&#125;&#125...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}