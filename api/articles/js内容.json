{"title":"js常用数组方法总结","uid":"f2200233214eb9075c586fefd73cbdb6","slug":"js内容","date":"2023-03-05T15:19:08.561Z","updated":"2023-03-06T15:44:32.225Z","comments":true,"path":"api/articles/js内容.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/xj.gif","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"好用的css属性\"><a href=\"#好用的css属性\" class=\"headerlink\" title=\"好用的css属性\"></a>好用的css属性</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> position: sticky：黏性定位</li>\n<li><input disabled=\"\" type=\"checkbox\"> :empty选择器：容器为空提示文字</li>\n<li><input disabled=\"\" type=\"checkbox\"> gap：flex元素间隔设置</li>\n<li><input disabled=\"\" type=\"checkbox\"> background-clip: text：可以做一个带背景的文字效果</li>\n<li><input disabled=\"\" type=\"checkbox\"> user-select：禁用光标选中 ，让网页看着和移动端一样</li>\n<li><input disabled=\"\" type=\"checkbox\"> :invalid 伪类：让 input 当值有效时，元素颜色为绿色，无效时为红色</li>\n<li><input disabled=\"\" type=\"checkbox\"> :focus-within 伪类：一个元素获得焦点，或该元素的后代元素获得焦点，就会匹配上</li>\n<li><input disabled=\"\" type=\"checkbox\"> mix-blend-mode:difference：描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合</li>\n</ul>\n<p>具体使用点击以下链接⬇️⬇️⬇️<br><a href=\"https://mp.weixin.qq.com/s/52BXTOtw_lj0agg-N87vqw\">好用的css属性🔗</a></p>\n<h1 id=\"数组常用方法\"><a href=\"#数组常用方法\" class=\"headerlink\" title=\"数组常用方法\"></a>数组常用方法</h1><h2 id=\"【增】\"><a href=\"#【增】\" class=\"headerlink\" title=\"【增】\"></a>【增】</h2><ul>\n<li><p>push()【改变原数组】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>unshift()【改变原数组】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>在数组开头添加任意多个值，然后返回新的数组长度<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>splice()【改变原数组】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">传入三个参数，分别是开始位置、<span class=\"token number\">0</span>（要删除的元素数量）、插入的元素，返回空数组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>concat()【不改变原数组】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组，二维数组的话会解构一层；\n在没有concat（）方法，传递参数的情况下，它只是复制当前数组并返回副本。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"【删】\"><a href=\"#【删】\" class=\"headerlink\" title=\"【删】\"></a>【删】</h2><ul>\n<li>pop()【改变原数组】<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法用于删除数组的最后一项，同时减少数组的length 值，返回被删除的项<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>shift()【改变原数组】<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法用于删除数组的第一项，同时减少数组的length 值，返回被删除的项<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>splice()【改变原数组】<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>slice()【不改变原数组】<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组\n  <span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> colors2 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> colors3 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// red,green,blue,yellow,purple</span>\n  concole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// green,blue,yellow,purple</span>\n  concole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// green,blue,yellow</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"【改】\"><a href=\"#【改】\" class=\"headerlink\" title=\"【改】\"></a>【改】</h2><ul>\n<li>splice()【改变原数组】<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响\n  <span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入两个值，删除一个元素</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red,red,purple,blue</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// green，只有一个元素的数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>fill()  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法用于将一个固定值替换数组的元素。\n参数：value 必须，填充的值\n​start 可选，开始填充的位置\n​end 可选，停止填充的位置，默认为array<span class=\"token punctuation\">.</span>length<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"【查】\"><a href=\"#【查】\" class=\"headerlink\" title=\"【查】\"></a>【查】</h2><ul>\n<li><p>indexOf()||lastindexof()反向</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">返回要查找的元素在数组中的位置，如果没找到则返回<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token literal-property property\">接收两个参数</span><span class=\"token operator\">:</span><span class=\"token function\">要查找的项和（可选的）表示查找起点位置的索引，其中，从数组的开头（位置0）开始向后查找</span><span class=\"token punctuation\">(</span>从前往后找<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>includes(searchElement[,fromIndex])</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">返回要查找的元素在数组中的位置，找到返回<span class=\"token boolean\">true</span>，否则<span class=\"token boolean\">false</span>\nfromIndex 从该索引处开始查找 searchElement。如果为负值，则按升序从 array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> fromIndex 的索引开始搜索。默 认为 <span class=\"token number\">0</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>find((el,index.array)=&gt;{})</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法返回通过测试（函数内判断）的数组的第一个元素的值。\n当数组中的元素在测试条件时返回 <span class=\"token boolean\">true</span> 时<span class=\"token punctuation\">,</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 返回符合条件的元素，之后的值不会再调用执行     数。\n如果没有符合条件的元素返回 <span class=\"token keyword\">undefined</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 对于空数组，函数是不会执行的<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>findIndex((el,index.array)=&gt;{})</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置索引。\n如果没有符合条件的元素返回 <span class=\"token operator\">-</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"【迭代方法】\"><a href=\"#【迭代方法】\" class=\"headerlink\" title=\"【迭代方法】\"></a>【迭代方法】</h2></li>\n<li><p>some()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，如果有一项函数返回 <span class=\"token boolean\">true</span> ，则这个方法返回 <span class=\"token boolean\">true</span>，反之为 <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>every()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，如果对每一项函数都返回 <span class=\"token boolean\">true</span> ，则这个方法返回 <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>反之为 <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>forEach()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，没有返回值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>filter()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，函数返回 <span class=\"token boolean\">true</span> 的项会组成数组之后返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>map()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组\n<span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mapResult <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mapResult<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2,4,6,8,10,8,6,4,2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>keys()、values()、entries()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">是对键名的遍历、values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">对键值的遍历、entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>是对键值对的遍历。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"【排序方法】\"><a href=\"#【排序方法】\" class=\"headerlink\" title=\"【排序方法】\"></a>【排序方法】</h2></li>\n<li><p>reverse()【原数组改变】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">数组反向排列\n  <span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5,4,3,2,1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>sort()【原数组改变】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法用于对数组的元素进行排序。\n数组在原数组上进行排序，不生成副本。\n升序：<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n降序：<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token operator\">-</span>a\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n对象根据某个属性排序：\n <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"刘\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"理想\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">objectSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Obj1<span class=\"token punctuation\">,</span>Obj2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> Obj1<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>Obj2<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">objectSort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>filter()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">对数组每一项都运行传入的函数，函数返回 <span class=\"token boolean\">true</span> 的项会组成数组之后返回<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"【转换方法】\"><a href=\"#【转换方法】\" class=\"headerlink\" title=\"【转换方法】\"></a>【转换方法】</h2></li>\n<li><p>join()</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串\n<span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red,green,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"||\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red||green||blue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","feature":true,"text":"好用的css属性 position: sticky：黏性定位 :empty选择器：容器为空提示文字 gap：flex元素间隔设置 background-clip: text：可以做一个带背景的文字效果 user-select：禁用光标选中 ，让网页看着和移动端一样 :invali...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"js摘记","slug":"js摘记","count":1,"path":"api/categories/js摘记.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E7%94%A8%E7%9A%84css%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">好用的css属性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">数组常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E5%A2%9E%E3%80%91\"><span class=\"toc-text\">【增】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E5%88%A0%E3%80%91\"><span class=\"toc-text\">【删】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E6%94%B9%E3%80%91\"><span class=\"toc-text\">【改】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E6%9F%A5%E3%80%91\"><span class=\"toc-text\">【查】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95%E3%80%91\"><span class=\"toc-text\">【迭代方法】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E3%80%91\"><span class=\"toc-text\">【排序方法】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95%E3%80%91\"><span class=\"toc-text\">【转换方法】</span></a></li></ol></li></ol>","author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"VSCode快捷键[mac]","uid":"183e0653004a9419c453246ded3121c2","slug":"vscode快捷键与配置","date":"2023-01-29T07:41:12.625Z","updated":"2023-02-01T05:01:32.155Z","comments":true,"path":"api/articles/vscode快捷键与配置.json","keywords":null,"cover":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/10000.jpg","text":"Mac VSCode 快捷键 全局 Command + Shift + P 显示命令面板 Command + P 快速打开 Command + Shift + N 打开新窗口 Command + W 关闭窗口 Command + , 打开用户设置 Command + K Comm...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"编码工具实用干货","slug":"编码工具实用干货","count":1,"path":"api/categories/编码工具实用干货.json"}],"tags":[{"name":"VSCode","slug":"VSCode","count":1,"path":"api/tags/VSCode.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://lcspg.oss-cn-hangzhou.aliyuncs.com/img/avatar.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}