{"total":21,"pageSize":12,"pageCount":2,"data":[{"title":"前端学习笔记","uid":"adae1d78a6d22cbcc84e90a45ad047a3","slug":"面试题总结","date":"2022-12-26T13:14:11.606Z","updated":"2023-01-30T08:20:17.210Z","comments":true,"path":"api/articles/面试题总结.json","cover":[],"text":" html 部分1. DOCTYPE 有什么作用？告诉浏览器使用哪个版本的 HTML 规范来渲染文档。DOCTYPE 不存在或形式不正确会导致 HTML 文档以混杂模式呈现。 2.页面导入样式时，使用 link 和 @import 有什么区别？link 引用 CSS 时候，页面载...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"web前端","slug":"web前端","count":3,"path":"api/categories/web前端.json"}],"tags":[{"name":"学习总结","slug":"学习总结","count":1,"path":"api/tags/学习总结.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Pinia菠萝——Vue的最新状态存储库","uid":"9a20f08646fc7ae20aeb4af73512aebe","slug":"【Pinia菠萝】——Vue最新的状态存储库","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/【Pinia菠萝】——Vue最新的状态存储库.json","cover":[],"text":"【Pinia 菠萝】——Vue 的最新状态存储库Pinia 是什么?Pinia 是一个用于 Vue 的状态管理库，类似 Vuex, 是 Vue 的另一种状态管理方案 Pinia 支持 Vue2 和 Vue3 Pinia 优势mutations 不再存在,更加简洁直观，减少代码冗余...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[{"name":"Pinia菠萝","slug":"Pinia菠萝","count":1,"path":"api/tags/Pinia菠萝.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Vue性能优化——按需引入第三方组件库","uid":"60f5536e92b4df8f10291e74b113744c","slug":"【Vue性能优化】——按需引入第三方组件库","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/【Vue性能优化】——按需引入第三方组件库.json","cover":[],"text":"Vue按需引入第三方组件库为什么按需引入组件库?为了能够快速开发，提高开发效率，通常都会引入第三方组件库，当把组件库全部导入项目中，最后打包项目后会发现项目的体积过大。实际情况中，整个项目可能才使用整个组件库40%的组件，而剩下60%不用就显得非常浪费。我们可以将这用到的40%的...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Vue性能优化","slug":"Vue性能优化","count":1,"path":"api/categories/Vue性能优化.json"}],"tags":[{"name":"Vue性能优化","slug":"Vue性能优化","count":1,"path":"api/tags/Vue性能优化.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"判断密码强度","uid":"93caf5b8f94c3a6b610b12e797fcd466","slug":"【前端面试题】——判断密码强度（简易版）","date":"2022-12-26T13:14:11.605Z","updated":"2023-01-30T07:32:48.916Z","comments":true,"path":"api/articles/【前端面试题】——判断密码强度（简易版）.json","cover":"https://gitee.com/caisong-li/img/raw/master/hz5.jpg","text":"【前端面试题】——判断密码强度（简易版）代码：&lt;body&gt; &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot; &#x2F;&gt; &lt;span id&#x3D;&quot;massge1...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"简单的数据转换","uid":"e838993256c291f049ef0caab62402ab","slug":"【前端面试题】——数据转换","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/【前端面试题】——数据转换.json","cover":null,"text":"【前端面试题】——数据转换初始数据：const data = [ &#123; id: \"1\", name: \"小才\", type: \"fruit\" &#125;, &#123; id: \"2\", name: \"小俞\", type: \"animal\" &#125;, &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"axios","uid":"33876cf3e210da358d8e4b065eea88e6","slug":"浅谈 axios","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/浅谈 axios.json","cover":null,"text":"浅谈 axios 什么是 axios？ Axios 是一个基于 promise 的 异步 ajax 请求库，前端最流行的 ajax 请求库。简单的讲就是可以发送 get、post 请求，负责与后端交互。Vue、React 等框架的出现，促使了 Axios 轻量级库的出现， rea...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"数据请求","slug":"数据请求","count":1,"path":"api/categories/数据请求.json"}],"tags":[{"name":"网络请求","slug":"网络请求","count":1,"path":"api/tags/网络请求.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"用Promise实现简单的红绿灯效果","uid":"bff22f3fd584462e1917ba54fb01e458","slug":"用Promise实现一个简单的红绿灯效果","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.606Z","comments":true,"path":"api/articles/用Promise实现一个简单的红绿灯效果.json","cover":[],"text":"用 Promise 实现一个简单的红绿灯效果 JS 部分： // js部分 const delay = &#123; query: Promise.resolve(), //初始化一个状态为成功的Promise对象 wait(timer) &#123; // this.query...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"简单的数据转换(二)","uid":"efb0492528fda01248e58bf9c3ab3caa","slug":"【前端面试题】——数据转换二","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/【前端面试题】——数据转换二.json","cover":null,"text":"【前端面试题】——数据转换二初始数据：const data = &#123; a: &#123; b: 3 &#125;, c: 10, d: [1, 8] &#125;; 转换成： const data = &#123;a.b: 3, c: 10, d[1]: 8&#125; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"js面试题","slug":"js面试题","count":4,"path":"api/categories/js面试题.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"关于vue2","uid":"3324d7472bb09e978be8ffc008c4f887","slug":"关于vue的学习笔记","date":"2022-12-26T13:14:11.605Z","updated":"2022-12-26T13:14:11.605Z","comments":true,"path":"api/articles/关于vue的学习笔记.json","cover":[],"text":"MVVM 的理解 MVVM` 表示的是 `Model-View-ViewModel 1：MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。 2：其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[{"name":"vue2","slug":"vue2","count":1,"path":"api/tags/vue2.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ES6新增详解","uid":"0b7869d8948a44428f2ef3d011726b80","slug":"ES６新增详解","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.604Z","comments":true,"path":"api/articles/ES６新增详解.json","cover":null,"text":"ES6 新增详解let 声明变量和 const 声明常量，两个都有块级作用域ES5中是没有块级作用域的，并且var有变量提升，在let中，使用的变量一定要进行声明 箭头函数ES6中的函数定义不再使用关键字function()，而是利用了()&#x3D;&gt;来进行定义 特点：箭...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"web前端","slug":"web前端","count":3,"path":"api/categories/web前端.json"}],"tags":[{"name":"ES6笔记","slug":"ES6笔记","count":2,"path":"api/tags/ES6笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"React小记【Redux】","uid":"60c5a95c0e5d17fc3703202ce808ceda","slug":"React学习总结( 三 ) 【 Redux 系列】","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.604Z","comments":true,"path":"api/articles/React学习总结( 三 ) 【 Redux 系列】.json","cover":[],"text":"React 学习总结( 三 )1.什么是 redux? Web 应用是一个状态机，视图与状态是一一对应的。 所有的状态，保存在一个对象里面。 // Redux是react中进行state状态管理的JS库（并不是react插件），一般是管理多个组件中共享数据状态。这个是和Vuex是...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"React小记（二）","uid":"343c996ed04fbebbae1554517bbe60b6","slug":"React学习总结( 二 )","date":"2022-12-26T13:14:11.604Z","updated":"2022-12-26T13:14:11.604Z","comments":true,"path":"api/articles/React学习总结( 二 ).json","cover":[],"text":"React 学习总结( 二 )1、HOC(高阶组件) Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。作用：可以给组件添加相同的结构,添加相同的属性等等,增强组件的功能，以及进行复用 温馨提示：一般用 with xxx.js 单独...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React笔记","slug":"React笔记","count":7,"path":"api/tags/React笔记.json"}],"author":{"name":"LCS's Blog","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @a <h3>加油！！！</h3>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}